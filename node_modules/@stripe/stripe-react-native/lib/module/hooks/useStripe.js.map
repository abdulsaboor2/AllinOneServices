{"version":3,"sources":["useStripe.tsx"],"names":["useStripe","isApplePaySupported","setApplePaySupported","checkApplePaySupport","isiOS","NativeStripeSdk","isSupported","_createPaymentMethod","data","options","_createToken","params","_retrievePaymentIntent","clientSecret","_retrieveSetupIntent","_confirmPayment","paymentIntentClientSecret","_presentApplePay","_updateApplePaySummaryItems","summaryItems","errorAddressFields","_confirmApplePayPayment","_handleCardAction","_confirmSetupIntent","_createTokenForCVCUpdate","cvc","_initPaymentSheet","_presentPaymentSheet","_confirmPaymentSheetPayment","_handleURLCallback","url","_initGooglePay","_presentGooglePay","_createGooglePayPaymentMethod","_openApplePaySetup","retrievePaymentIntent","retrieveSetupIntent","confirmPayment","createPaymentMethod","handleCardAction","presentApplePay","confirmApplePayPayment","confirmSetupIntent","createTokenForCVCUpdate","updateApplePaySummaryItems","handleURLCallback","confirmPaymentSheetPayment","presentPaymentSheet","initPaymentSheet","createToken","initGooglePay","presentGooglePay","createGooglePayPaymentMethod","openApplePaySetup"],"mappings":"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","sourcesContent":["import type {\n  PaymentMethodCreateParams,\n  ApplePay,\n  PaymentSheet,\n  CreatePaymentMethodResult,\n  RetrievePaymentIntentResult,\n  RetrieveSetupIntentResult,\n  ConfirmPaymentResult,\n  HandleCardActionResult,\n  ConfirmSetupIntentResult,\n  CreateTokenForCVCUpdateResult,\n  ApplePayResult,\n  ApplePayError,\n  StripeError,\n  InitPaymentSheetResult,\n  PresentPaymentSheetResult,\n  ConfirmPaymentSheetPaymentResult,\n  ConfirmSetupIntent,\n  CreateTokenResult,\n  Card,\n  PayWithGooglePayResult,\n  GooglePayInitResult,\n  GooglePay,\n  CreateGooglePayPaymentMethodResult,\n  OpenApplePaySetupResult,\n} from '../types';\nimport { useCallback, useEffect, useState } from 'react';\nimport { isiOS } from '../helpers';\nimport NativeStripeSdk from '../NativeStripeSdk';\nimport {\n  confirmPayment,\n  createPaymentMethod,\n  retrievePaymentIntent,\n  retrieveSetupIntent,\n  confirmApplePayPayment,\n  confirmSetupIntent,\n  createTokenForCVCUpdate,\n  handleCardAction,\n  handleURLCallback,\n  presentApplePay,\n  updateApplePaySummaryItems,\n  initPaymentSheet,\n  presentPaymentSheet,\n  confirmPaymentSheetPayment,\n  createToken,\n  initGooglePay,\n  createGooglePayPaymentMethod,\n  presentGooglePay,\n  openApplePaySetup,\n} from '../functions';\n\n/**\n * useStripe hook\n */\nexport function useStripe() {\n  const [isApplePaySupported, setApplePaySupported] = useState<boolean | null>(\n    null\n  );\n\n  useEffect(() => {\n    async function checkApplePaySupport() {\n      const isSupported =\n        isiOS && (await NativeStripeSdk.isApplePaySupported());\n      setApplePaySupported(isSupported);\n    }\n\n    checkApplePaySupport();\n  }, []);\n\n  const _createPaymentMethod = useCallback(\n    async (\n      data: PaymentMethodCreateParams.Params,\n      options: PaymentMethodCreateParams.Options = {}\n    ): Promise<CreatePaymentMethodResult> => {\n      return createPaymentMethod(data, options);\n    },\n    []\n  );\n\n  const _createToken = useCallback(\n    async (params: Card.CreateTokenParams): Promise<CreateTokenResult> => {\n      return createToken(params);\n    },\n    []\n  );\n\n  const _retrievePaymentIntent = useCallback(\n    async (clientSecret: string): Promise<RetrievePaymentIntentResult> => {\n      return retrievePaymentIntent(clientSecret);\n    },\n    []\n  );\n\n  const _retrieveSetupIntent = useCallback(\n    async (clientSecret: string): Promise<RetrieveSetupIntentResult> => {\n      return retrieveSetupIntent(clientSecret);\n    },\n    []\n  );\n\n  const _confirmPayment = useCallback(\n    async (\n      paymentIntentClientSecret: string,\n      data: PaymentMethodCreateParams.Params,\n      options: PaymentMethodCreateParams.Options = {}\n    ): Promise<ConfirmPaymentResult> => {\n      return confirmPayment(paymentIntentClientSecret, data, options);\n    },\n    []\n  );\n\n  const _presentApplePay = useCallback(\n    async (params: ApplePay.PresentParams): Promise<ApplePayResult> => {\n      return presentApplePay(params);\n    },\n    []\n  );\n\n  const _updateApplePaySummaryItems = useCallback(\n    async (\n      summaryItems: ApplePay.CartSummaryItem[],\n      errorAddressFields: Array<{\n        field: ApplePay.AddressFields;\n        message?: string;\n      }> = []\n    ): Promise<{ error?: StripeError<ApplePayError> }> => {\n      return updateApplePaySummaryItems(summaryItems, errorAddressFields);\n    },\n    []\n  );\n\n  const _confirmApplePayPayment = useCallback(\n    async (\n      clientSecret: string\n    ): Promise<{ error?: StripeError<ApplePayError> }> => {\n      return confirmApplePayPayment(clientSecret);\n    },\n    []\n  );\n\n  const _handleCardAction = useCallback(\n    async (\n      paymentIntentClientSecret: string\n    ): Promise<HandleCardActionResult> => {\n      return handleCardAction(paymentIntentClientSecret);\n    },\n    []\n  );\n\n  const _confirmSetupIntent = useCallback(\n    async (\n      paymentIntentClientSecret: string,\n      data: ConfirmSetupIntent.Params,\n      options: ConfirmSetupIntent.Options = {}\n    ): Promise<ConfirmSetupIntentResult> => {\n      return confirmSetupIntent(paymentIntentClientSecret, data, options);\n    },\n    []\n  );\n\n  const _createTokenForCVCUpdate = useCallback(\n    async (cvc: string): Promise<CreateTokenForCVCUpdateResult> => {\n      return createTokenForCVCUpdate(cvc);\n    },\n    []\n  );\n\n  const _initPaymentSheet = useCallback(\n    async (\n      params: PaymentSheet.SetupParams\n    ): Promise<InitPaymentSheetResult> => {\n      return initPaymentSheet(params);\n    },\n    []\n  );\n\n  const _presentPaymentSheet =\n    useCallback(async (): Promise<PresentPaymentSheetResult> => {\n      return presentPaymentSheet();\n    }, []);\n\n  const _confirmPaymentSheetPayment =\n    useCallback(async (): Promise<ConfirmPaymentSheetPaymentResult> => {\n      return confirmPaymentSheetPayment();\n    }, []);\n\n  const _handleURLCallback = useCallback(\n    async (url: string): Promise<boolean> => {\n      return handleURLCallback(url);\n    },\n    []\n  );\n\n  const _initGooglePay = useCallback(\n    async (params: GooglePay.InitParams): Promise<GooglePayInitResult> => {\n      return initGooglePay(params);\n    },\n    []\n  );\n\n  const _presentGooglePay = useCallback(\n    async (\n      params: GooglePay.PresentGooglePayParams\n    ): Promise<PayWithGooglePayResult> => {\n      return presentGooglePay(params);\n    },\n    []\n  );\n\n  const _createGooglePayPaymentMethod = useCallback(\n    async (\n      params: GooglePay.CreatePaymentMethodParams\n    ): Promise<CreateGooglePayPaymentMethodResult> => {\n      return createGooglePayPaymentMethod(params);\n    },\n    []\n  );\n\n  const _openApplePaySetup =\n    useCallback(async (): Promise<OpenApplePaySetupResult> => {\n      return openApplePaySetup();\n    }, []);\n\n  return {\n    retrievePaymentIntent: _retrievePaymentIntent,\n    retrieveSetupIntent: _retrieveSetupIntent,\n    confirmPayment: _confirmPayment,\n    createPaymentMethod: _createPaymentMethod,\n    handleCardAction: _handleCardAction,\n    isApplePaySupported: isApplePaySupported,\n    presentApplePay: _presentApplePay,\n    confirmApplePayPayment: _confirmApplePayPayment,\n    confirmSetupIntent: _confirmSetupIntent,\n    createTokenForCVCUpdate: _createTokenForCVCUpdate,\n    updateApplePaySummaryItems: _updateApplePaySummaryItems,\n    handleURLCallback: _handleURLCallback,\n    confirmPaymentSheetPayment: _confirmPaymentSheetPayment,\n    presentPaymentSheet: _presentPaymentSheet,\n    initPaymentSheet: _initPaymentSheet,\n    createToken: _createToken,\n    initGooglePay: _initGooglePay,\n    presentGooglePay: _presentGooglePay,\n    createGooglePayPaymentMethod: _createGooglePayPaymentMethod,\n    openApplePaySetup: _openApplePaySetup,\n  };\n}\n"]}