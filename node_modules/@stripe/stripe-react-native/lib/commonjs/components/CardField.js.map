{"version":3,"sources":["CardField.tsx"],"names":["CardFieldNative","CardField","ref","onCardChange","onFocus","onBlur","cardStyle","placeholder","postalCodeEnabled","props","inputRef","onCardChangeHandler","event","card","nativeEvent","data","last4","expiryMonth","expiryYear","complete","brand","hasOwnProperty","postalCode","number","__DEV__","console","warn","onFocusHandler","focusedField","current","focus","UIManager","dispatchViewManagerCommand","blur","clear","inputRefValue","backgroundColor","borderColor","borderWidth","borderRadius","cursorColor","fontSize","placeholderColor","textColor","textErrorColor","fontFamily","expiration","cvc"],"mappings":"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","sourcesContent":["import type { CardFieldInput, Nullable } from '../types';\nimport React, {\n  forwardRef,\n  useCallback,\n  useImperativeHandle,\n  useLayoutEffect,\n  useRef,\n} from 'react';\nimport {\n  AccessibilityProps,\n  NativeSyntheticEvent,\n  requireNativeComponent,\n  UIManager,\n  StyleProp,\n  findNodeHandle,\n  ViewStyle,\n} from 'react-native';\nimport {\n  currentlyFocusedInput,\n  focusInput,\n  registerInput,\n  unregisterInput,\n} from '../helpers';\n\nconst CardFieldNative =\n  requireNativeComponent<CardFieldInput.NativeProps>('CardField');\n\n/**\n *  Card Field Component Props\n */\nexport interface Props extends AccessibilityProps {\n  style?: StyleProp<ViewStyle>;\n  postalCodeEnabled?: boolean;\n  cardStyle?: CardFieldInput.Styles;\n  placeholder?: CardFieldInput.Placeholders;\n  autofocus?: boolean;\n  onCardChange?(card: CardFieldInput.Details): void;\n  onBlur?(): void;\n  onFocus?(focusedField: Nullable<CardFieldInput.Names>): void;\n  testID?: string;\n  /**\n   * WARNING: If set to `true` the full card number will be returned in the `onCardChange` handler.\n   * Only do this if you're certain that you fulfill the necessary PCI compliance requirements.\n   * Make sure that you're not mistakenly logging or storing full card details!\n   * See the docs for details: https://stripe.com/docs/security/guide#validating-pci-compliance\n   */\n  dangerouslyGetFullCardDetails?: boolean;\n}\n\n/**\n *  Card Field Component\n *\n * @example\n * ```ts\n * <CardField\n *    postalCodeEnabled={false}\n *    onCardChange={(cardDetails) => {\n *    console.log('card details', cardDetails);\n *      setCard(cardDetails);\n *    }}\n *    style={{height: 50}}\n *  />\n * ```\n * @param __namedParameters Props\n * @returns JSX.Element\n * @category ReactComponents\n */\nexport const CardField = forwardRef<CardFieldInput.Methods, Props>(\n  (\n    {\n      onCardChange,\n      onFocus,\n      onBlur,\n      cardStyle,\n      placeholder,\n      postalCodeEnabled,\n      ...props\n    },\n    ref\n  ) => {\n    const inputRef = useRef<any>(null);\n\n    const onCardChangeHandler = useCallback(\n      (event: NativeSyntheticEvent<CardFieldInput.Details>) => {\n        const card = event.nativeEvent;\n\n        const data: CardFieldInput.Details = {\n          last4: card.last4,\n          expiryMonth: card.expiryMonth,\n          expiryYear: card.expiryYear,\n          complete: card.complete,\n          brand: card.brand,\n        };\n\n        if (card.hasOwnProperty('postalCode')) {\n          data.postalCode = card.postalCode || '';\n        }\n        if (card.hasOwnProperty('number')) {\n          data.number = card.number || '';\n          if (__DEV__ && onCardChange && card.complete) {\n            console.warn(\n              `[stripe-react-native] ⚠️ WARNING: You've enabled \\`dangerouslyGetFullCardDetails\\`, meaning full card details are being returned. Only do this if you're certain that you fulfill the necessary PCI compliance requirements. Make sure that you're not mistakenly logging or storing full card details! See the docs for details: https://stripe.com/docs/security/guide#validating-pci-compliance`\n            );\n          }\n        }\n        onCardChange?.(data);\n      },\n      [onCardChange]\n    );\n\n    const onFocusHandler = useCallback(\n      (event) => {\n        const { focusedField } = event.nativeEvent;\n        if (focusedField) {\n          focusInput(inputRef.current);\n          onFocus?.(focusedField);\n        } else {\n          onBlur?.();\n        }\n      },\n      [onFocus, onBlur]\n    );\n\n    const focus = () => {\n      UIManager.dispatchViewManagerCommand(\n        findNodeHandle(inputRef.current),\n        'focus' as any,\n        []\n      );\n    };\n\n    const blur = () => {\n      UIManager.dispatchViewManagerCommand(\n        findNodeHandle(inputRef.current),\n        'blur' as any,\n        []\n      );\n    };\n\n    const clear = () => {\n      UIManager.dispatchViewManagerCommand(\n        findNodeHandle(inputRef.current),\n        'clear' as any,\n        []\n      );\n    };\n\n    useImperativeHandle(ref, () => ({\n      focus,\n      blur,\n      clear,\n    }));\n\n    useLayoutEffect(() => {\n      const inputRefValue = inputRef.current;\n      if (inputRefValue !== null) {\n        registerInput(inputRefValue);\n        return () => {\n          unregisterInput(inputRefValue);\n          if (currentlyFocusedInput() === inputRefValue) {\n            inputRefValue.blur();\n          }\n        };\n      }\n      return () => {};\n    }, [inputRef]);\n\n    return (\n      <CardFieldNative\n        ref={inputRef}\n        onCardChange={onCardChangeHandler}\n        onFocusChange={onFocusHandler}\n        postalCodeEnabled={postalCodeEnabled ?? true}\n        cardStyle={{\n          backgroundColor: cardStyle?.backgroundColor,\n          borderColor: cardStyle?.borderColor,\n          borderWidth: cardStyle?.borderWidth,\n          borderRadius: cardStyle?.borderRadius,\n          cursorColor: cardStyle?.cursorColor,\n          fontSize: cardStyle?.fontSize,\n          placeholderColor: cardStyle?.placeholderColor,\n          textColor: cardStyle?.textColor,\n          textErrorColor: cardStyle?.textErrorColor,\n          fontFamily: cardStyle?.fontFamily,\n        }}\n        placeholder={{\n          number: placeholder?.number,\n          expiration: placeholder?.expiration,\n          cvc: placeholder?.cvc,\n          postalCode: placeholder?.postalCode,\n        }}\n        {...props}\n      />\n    );\n  }\n);\n"]}