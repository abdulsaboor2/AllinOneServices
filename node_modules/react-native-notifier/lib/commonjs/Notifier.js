"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NotifierRoot = exports.Notifier = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _reactNativeGestureHandler = require("react-native-gesture-handler");

var _Notifier = _interopRequireDefault(require("./Notifier.styles"));

var _components = require("./components");

var _constants = require("./constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const Notifier = {
  showNotification: () => {},
  hideNotification: () => {},
  clearQueue: () => {}
};
exports.Notifier = Notifier;

class NotifierRoot extends _react.default.PureComponent {
  constructor(props) {
    super(props);

    _defineProperty(this, "isShown", void 0);

    _defineProperty(this, "isHiding", void 0);

    _defineProperty(this, "hideTimer", void 0);

    _defineProperty(this, "showParams", void 0);

    _defineProperty(this, "callStack", void 0);

    _defineProperty(this, "hiddenComponentValue", void 0);

    _defineProperty(this, "translateY", void 0);

    _defineProperty(this, "translateYInterpolated", void 0);

    _defineProperty(this, "onGestureEvent", void 0);

    this.state = {
      Component: _components.Notification,
      swipeEnabled: _constants.DEFAULT_SWIPE_ENABLED,
      componentProps: {}
    };
    this.isShown = false;
    this.isHiding = false;
    this.hideTimer = null;
    this.showParams = null;
    this.callStack = [];
    this.hiddenComponentValue = -_constants.DEFAULT_COMPONENT_HEIGHT;
    this.translateY = new _reactNative.Animated.Value(_constants.MIN_TRANSLATE_Y);
    this.translateYInterpolated = this.translateY.interpolate({
      inputRange: [_constants.MIN_TRANSLATE_Y, _constants.MAX_TRANSLATE_Y],
      outputRange: [_constants.MIN_TRANSLATE_Y, _constants.MAX_TRANSLATE_Y],
      extrapolate: 'clamp'
    });
    this.onGestureEvent = _reactNative.Animated.event([{
      nativeEvent: {
        translationY: this.translateY
      }
    }], {
      useNativeDriver: true
    });
    this.onPress = this.onPress.bind(this);
    this.onHandlerStateChange = this.onHandlerStateChange.bind(this);
    this.onLayout = this.onLayout.bind(this);
    this.showNotification = this.showNotification.bind(this);
    this.hideNotification = this.hideNotification.bind(this);
    this.clearQueue = this.clearQueue.bind(this);
    Notifier.showNotification = this.showNotification;
    Notifier.hideNotification = this.hideNotification;
    Notifier.clearQueue = this.clearQueue;
  }

  componentWillUnmount() {
    clearTimeout(this.hideTimer);
  }

  hideNotification(callback) {
    var _this$showParams$hide, _this$showParams, _this$showParams2, _ref, _this$showParams$hide2, _this$showParams3, _this$showParams4;

    if (!this.isShown || this.isHiding) {
      return;
    }

    _reactNative.Animated.timing(this.translateY, {
      toValue: this.hiddenComponentValue,
      easing: (_this$showParams$hide = (_this$showParams = this.showParams) === null || _this$showParams === void 0 ? void 0 : _this$showParams.hideEasing) !== null && _this$showParams$hide !== void 0 ? _this$showParams$hide : (_this$showParams2 = this.showParams) === null || _this$showParams2 === void 0 ? void 0 : _this$showParams2.easing,
      duration: (_ref = (_this$showParams$hide2 = (_this$showParams3 = this.showParams) === null || _this$showParams3 === void 0 ? void 0 : _this$showParams3.hideAnimationDuration) !== null && _this$showParams$hide2 !== void 0 ? _this$showParams$hide2 : (_this$showParams4 = this.showParams) === null || _this$showParams4 === void 0 ? void 0 : _this$showParams4.animationDuration) !== null && _ref !== void 0 ? _ref : _constants.DEFAULT_ANIMATION_DURATION,
      useNativeDriver: true
    }).start(result => {
      this.onHidden();
      callback === null || callback === void 0 ? void 0 : callback(result);
    });

    this.onStartHiding();
  }

  showNotification(functionParams) {
    var _this$props, _this$showParams$show, _this$showParams5, _this$showParams6, _ref2, _this$showParams$show2, _this$showParams7, _this$showParams8;

    const params = { ...this.props,
      ...functionParams,
      componentProps: { ...((_this$props = this.props) === null || _this$props === void 0 ? void 0 : _this$props.componentProps),
        ...(functionParams === null || functionParams === void 0 ? void 0 : functionParams.componentProps)
      }
    };

    if (this.isShown) {
      switch (params.queueMode) {
        case 'standby':
          {
            this.callStack.push(params);
            break;
          }

        case 'next':
          {
            this.callStack.unshift(params);
            break;
          }

        case 'immediate':
          {
            this.callStack.unshift(params);
            this.hideNotification();
            break;
          }

        default:
          {
            this.callStack = [params];
            this.hideNotification();
            break;
          }
      }

      return;
    }

    const {
      title,
      description,
      swipeEnabled,
      Component,
      componentProps,
      translucentStatusBar,
      containerStyle,
      containerProps,
      onShown,
      ...restParams
    } = params;
    this.setState({
      title,
      description,
      Component: Component !== null && Component !== void 0 ? Component : _components.Notification,
      swipeEnabled: swipeEnabled !== null && swipeEnabled !== void 0 ? swipeEnabled : _constants.DEFAULT_SWIPE_ENABLED,
      componentProps: componentProps,
      translucentStatusBar,
      containerStyle,
      containerProps
    });
    this.showParams = restParams;
    this.isShown = true;
    this.setHideTimer();
    this.translateY.setValue(-_constants.DEFAULT_COMPONENT_HEIGHT);

    _reactNative.Animated.timing(this.translateY, {
      toValue: _constants.MAX_TRANSLATE_Y,
      easing: (_this$showParams$show = (_this$showParams5 = this.showParams) === null || _this$showParams5 === void 0 ? void 0 : _this$showParams5.showEasing) !== null && _this$showParams$show !== void 0 ? _this$showParams$show : (_this$showParams6 = this.showParams) === null || _this$showParams6 === void 0 ? void 0 : _this$showParams6.easing,
      duration: (_ref2 = (_this$showParams$show2 = (_this$showParams7 = this.showParams) === null || _this$showParams7 === void 0 ? void 0 : _this$showParams7.showAnimationDuration) !== null && _this$showParams$show2 !== void 0 ? _this$showParams$show2 : (_this$showParams8 = this.showParams) === null || _this$showParams8 === void 0 ? void 0 : _this$showParams8.animationDuration) !== null && _ref2 !== void 0 ? _ref2 : _constants.DEFAULT_ANIMATION_DURATION,
      useNativeDriver: true
    }).start(onShown);
  }

  clearQueue(hideDisplayedNotification) {
    this.callStack = [];

    if (hideDisplayedNotification) {
      this.hideNotification();
    }
  }

  setHideTimer() {
    var _this$showParams9;

    const {
      duration = _constants.DEFAULT_DURATION
    } = (_this$showParams9 = this.showParams) !== null && _this$showParams9 !== void 0 ? _this$showParams9 : {};
    clearTimeout(this.hideTimer);

    if (duration && !isNaN(duration)) {
      this.hideTimer = setTimeout(this.hideNotification, duration);
    }
  }

  onStartHiding() {
    var _this$showParams10, _this$showParams10$on;

    (_this$showParams10 = this.showParams) === null || _this$showParams10 === void 0 ? void 0 : (_this$showParams10$on = _this$showParams10.onStartHiding) === null || _this$showParams10$on === void 0 ? void 0 : _this$showParams10$on.call(_this$showParams10);
    this.isHiding = true;
    clearTimeout(this.hideTimer);
  }

  onHidden() {
    var _this$showParams11, _this$showParams11$on;

    (_this$showParams11 = this.showParams) === null || _this$showParams11 === void 0 ? void 0 : (_this$showParams11$on = _this$showParams11.onHidden) === null || _this$showParams11$on === void 0 ? void 0 : _this$showParams11$on.call(_this$showParams11);
    this.isShown = false;
    this.isHiding = false;
    this.showParams = null;
    this.translateY.setValue(_constants.MIN_TRANSLATE_Y);
    const nextNotification = this.callStack.shift();

    if (nextNotification) {
      this.showNotification(nextNotification);
    }
  }

  onHandlerStateChange({
    nativeEvent
  }) {
    var _this$showParams$swip, _this$showParams12, _this$showParams13, _this$showParams$swip2, _this$showParams14;

    if (nativeEvent.state === _reactNativeGestureHandler.State.ACTIVE) {
      clearTimeout(this.hideTimer);
    }

    if (nativeEvent.oldState !== _reactNativeGestureHandler.State.ACTIVE) {
      return;
    }

    this.setHideTimer();
    const swipePixelsToClose = -((_this$showParams$swip = (_this$showParams12 = this.showParams) === null || _this$showParams12 === void 0 ? void 0 : _this$showParams12.swipePixelsToClose) !== null && _this$showParams$swip !== void 0 ? _this$showParams$swip : _constants.SWIPE_PIXELS_TO_CLOSE);
    const isSwipedOut = nativeEvent.translationY < swipePixelsToClose;

    _reactNative.Animated.timing(this.translateY, {
      toValue: isSwipedOut ? this.hiddenComponentValue : _constants.MAX_TRANSLATE_Y,
      easing: (_this$showParams13 = this.showParams) === null || _this$showParams13 === void 0 ? void 0 : _this$showParams13.swipeEasing,
      duration: (_this$showParams$swip2 = (_this$showParams14 = this.showParams) === null || _this$showParams14 === void 0 ? void 0 : _this$showParams14.swipeAnimationDuration) !== null && _this$showParams$swip2 !== void 0 ? _this$showParams$swip2 : _constants.SWIPE_ANIMATION_DURATION,
      useNativeDriver: true
    }).start(() => {
      if (isSwipedOut) {
        this.onHidden();
      }
    });

    if (isSwipedOut) {
      this.onStartHiding();
    }
  }

  onPress() {
    var _this$showParams15, _this$showParams15$on, _this$showParams16;

    (_this$showParams15 = this.showParams) === null || _this$showParams15 === void 0 ? void 0 : (_this$showParams15$on = _this$showParams15.onPress) === null || _this$showParams15$on === void 0 ? void 0 : _this$showParams15$on.call(_this$showParams15);

    if (((_this$showParams16 = this.showParams) === null || _this$showParams16 === void 0 ? void 0 : _this$showParams16.hideOnPress) !== false) {
      this.hideNotification();
    }
  }

  onLayout({
    nativeEvent
  }) {
    const heightWithMargin = nativeEvent.layout.height + 50;
    this.hiddenComponentValue = -Math.max(heightWithMargin, _constants.DEFAULT_COMPONENT_HEIGHT);
  }

  render() {
    const {
      title,
      description,
      swipeEnabled,
      Component,
      componentProps,
      translucentStatusBar,
      containerStyle,
      containerProps
    } = this.state;
    const additionalContainerStyle = typeof containerStyle === 'function' ? containerStyle(this.translateY) : containerStyle;
    return /*#__PURE__*/_react.default.createElement(_reactNativeGestureHandler.PanGestureHandler, {
      enabled: swipeEnabled,
      onGestureEvent: this.onGestureEvent,
      onHandlerStateChange: this.onHandlerStateChange
    }, /*#__PURE__*/_react.default.createElement(_reactNative.Animated.View, _extends({}, containerProps, {
      style: [_Notifier.default.container, {
        transform: [{
          translateY: this.translateYInterpolated
        }]
      }, additionalContainerStyle]
    }), /*#__PURE__*/_react.default.createElement(_reactNative.TouchableWithoutFeedback, {
      onPress: this.onPress
    }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
      onLayout: this.onLayout,
      style: _reactNative.Platform.OS === 'android' && translucentStatusBar ? _Notifier.default.translucentStatusBarPadding : undefined
    }, /*#__PURE__*/_react.default.createElement(Component, _extends({
      title: title,
      description: description
    }, componentProps))))));
  }

}

exports.NotifierRoot = NotifierRoot;
//# sourceMappingURL=Notifier.js.map