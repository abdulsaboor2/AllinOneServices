{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport UIManager from \"../../exports/UIManager\";\nimport createDOMProps from \"../createDOMProps\";\nimport useStable from \"../useStable\";\nimport { useRef } from 'react';\nvar emptyObject = {};\n\nfunction setNativeProps(node, nativeProps, classList, pointerEvents, style, previousStyleRef) {\n  if (node != null && nativeProps) {\n    var domProps = createDOMProps(null, _objectSpread(_objectSpread({\n      pointerEvents: pointerEvents\n    }, nativeProps), {}, {\n      classList: [classList, nativeProps.className],\n      style: [style, nativeProps.style]\n    }));\n    var nextDomStyle = domProps.style;\n\n    if (previousStyleRef.current != null) {\n      if (domProps.style == null) {\n        domProps.style = {};\n      }\n\n      for (var styleName in previousStyleRef.current) {\n        if (domProps.style[styleName] == null) {\n          domProps.style[styleName] = '';\n        }\n      }\n    }\n\n    previousStyleRef.current = nextDomStyle;\n    UIManager.updateView(node, domProps);\n  }\n}\n\nexport default function usePlatformMethods(_ref) {\n  var classList = _ref.classList,\n      pointerEvents = _ref.pointerEvents,\n      style = _ref.style;\n  var previousStyleRef = useRef(null);\n  var setNativePropsArgsRef = useRef(null);\n  setNativePropsArgsRef.current = {\n    classList: classList,\n    pointerEvents: pointerEvents,\n    style: style\n  };\n  var ref = useStable(function () {\n    return function (hostNode) {\n      if (hostNode != null) {\n        hostNode.measure = function (callback) {\n          return UIManager.measure(hostNode, callback);\n        };\n\n        hostNode.measureLayout = function (relativeToNode, success, failure) {\n          return UIManager.measureLayout(hostNode, relativeToNode, failure, success);\n        };\n\n        hostNode.measureInWindow = function (callback) {\n          return UIManager.measureInWindow(hostNode, callback);\n        };\n\n        hostNode.setNativeProps = function (nativeProps) {\n          var _ref2 = setNativePropsArgsRef.current || emptyObject,\n              classList = _ref2.classList,\n              style = _ref2.style,\n              pointerEvents = _ref2.pointerEvents;\n\n          setNativeProps(hostNode, nativeProps, classList, pointerEvents, style, previousStyleRef);\n        };\n      }\n    };\n  });\n  return ref;\n}","map":{"version":3,"sources":["C:/Users/USER/signupp/node_modules/react-native-web/src/modules/usePlatformMethods/index.js"],"names":["UIManager","createDOMProps","useStable","useRef","emptyObject","setNativeProps","node","nativeProps","classList","pointerEvents","style","previousStyleRef","domProps","className","nextDomStyle","current","styleName","updateView","usePlatformMethods","setNativePropsArgsRef","ref","hostNode","measure","callback","measureLayout","relativeToNode","success","failure","measureInWindow"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type { GenericStyleProp } from '../../types';\nimport type { ViewProps } from '../../exports/View';\n\nimport UIManager from '../../exports/UIManager';\nimport createDOMProps from '../createDOMProps';\nimport useStable from '../useStable';\nimport { useRef } from 'react';\n\nconst emptyObject = {};\n\nfunction setNativeProps(node, nativeProps, classList, pointerEvents, style, previousStyleRef) {\n  if (node != null && nativeProps) {\n    const domProps = createDOMProps(null, {\n      pointerEvents,\n      ...nativeProps,\n      classList: [classList, nativeProps.className],\n      style: [style, nativeProps.style]\n    });\n\n    const nextDomStyle = domProps.style;\n\n    if (previousStyleRef.current != null) {\n      if (domProps.style == null) {\n        domProps.style = {};\n      }\n      for (const styleName in previousStyleRef.current) {\n        if (domProps.style[styleName] == null) {\n          domProps.style[styleName] = '';\n        }\n      }\n    }\n\n    previousStyleRef.current = nextDomStyle;\n\n    UIManager.updateView(node, domProps);\n  }\n}\n\n/**\n * Adds non-standard methods to the hode element. This is temporarily until an\n * API like `ReactNative.measure(hostRef, callback)` is added to React Native.\n */\nexport default function usePlatformMethods({\n  classList,\n  pointerEvents,\n  style\n}: {\n  classList?: Array<string | boolean>,\n  style?: GenericStyleProp<*>,\n  pointerEvents?: $PropertyType<ViewProps, 'pointerEvents'>\n}): (hostNode: any) => void {\n  const previousStyleRef = useRef(null);\n  const setNativePropsArgsRef = useRef(null);\n  setNativePropsArgsRef.current = { classList, pointerEvents, style };\n\n  // Avoid creating a new ref on every render. The props only need to be\n  // available to 'setNativeProps' when it is called.\n  const ref = useStable(() => (hostNode: any) => {\n    if (hostNode != null) {\n      hostNode.measure = (callback) => UIManager.measure(hostNode, callback);\n      hostNode.measureLayout = (relativeToNode, success, failure) =>\n        UIManager.measureLayout(hostNode, relativeToNode, failure, success);\n      hostNode.measureInWindow = (callback) => UIManager.measureInWindow(hostNode, callback);\n      hostNode.setNativeProps = (nativeProps) => {\n        const { classList, style, pointerEvents } = setNativePropsArgsRef.current || emptyObject;\n        setNativeProps(hostNode, nativeProps, classList, pointerEvents, style, previousStyleRef);\n      };\n    }\n  });\n\n  return ref;\n}\n"]},"metadata":{},"sourceType":"module"}