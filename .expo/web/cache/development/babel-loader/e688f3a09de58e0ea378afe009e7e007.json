{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect, useCallback, useLayoutEffect } from 'react';\nimport { GiftedChat } from 'react-native-gifted-chat';\nimport { firebase } from \"../firebaseConfig/Config\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var ChatScreen = function ChatScreen() {\n  var _firebase$auth, _firebase$auth$curren;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      messages = _useState2[0],\n      setMessages = _useState2[1];\n\n  useEffect(function () {\n    var unsubscribe = firebase.firestore().collection('chats').orderBy('createdAt', 'desc').onSnapshot(function (querySnapshot) {\n      setMessages(querySnapshot.docs.map(function (doc) {\n        return {\n          _id: doc.data()._id,\n          createdAt: doc.data().createdAt.toDate(),\n          text: doc.data().text,\n          user: doc.data().user\n        };\n      }));\n    });\n    return unsubscribe;\n  }, []);\n\n  var _onSend = useCallback(function () {\n    var messages = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    setMessages(function (previousMessages) {\n      return GiftedChat.append(previousMessages, messages);\n    });\n    var _messages$ = messages[0],\n        _id = _messages$._id,\n        createdAt = _messages$.createdAt,\n        text = _messages$.text,\n        user = _messages$.user;\n    firebase.firestore().collection('chats').doc(_id).set(messages[0]);\n  }, []);\n\n  return _jsx(GiftedChat, {\n    messages: messages,\n    showAvatarForEveryMessage: true,\n    onSend: function onSend(messages) {\n      return _onSend(messages);\n    },\n    user: {\n      _id: (_firebase$auth = firebase.auth()) == null ? void 0 : (_firebase$auth$curren = _firebase$auth.currentUser) == null ? void 0 : _firebase$auth$curren.email\n    }\n  });\n};","map":{"version":3,"sources":["C:/Users/USER/signupp/Components/ChatScreen/ChatScreen.js"],"names":["React","useState","useEffect","useCallback","useLayoutEffect","GiftedChat","firebase","ChatScreen","messages","setMessages","unsubscribe","firestore","collection","orderBy","onSnapshot","querySnapshot","docs","map","doc","_id","data","createdAt","toDate","text","user","onSend","previousMessages","append","set","auth","currentUser","email"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,EAAoCC,WAApC,EAAiDC,eAAjD,QAAuE,OAAvE;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,QAAT;;AAEA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AAAA;;AAC5B,kBAAgCN,QAAQ,CAAC,EAAD,CAAxC;AAAA;AAAA,MAAOO,QAAP;AAAA,MAAiBC,WAAjB;;AAEAP,EAAAA,SAAS,CAAC,YAAM;AACjB,QAAMQ,WAAW,GAAEJ,QAAQ,CAACK,SAAT,GAAqBC,UAArB,CAAgC,OAAhC,EAAyCC,OAAzC,CAAiD,WAAjD,EAA8D,MAA9D,EAAsEC,UAAtE,CAAiF,UAAAC,aAAa,EAAI;AAChHN,MAAAA,WAAW,CACTM,aAAa,CAACC,IAAd,CAAmBC,GAAnB,CAAuB,UAAAC,GAAG;AAAA,eAAK;AAC7BC,UAAAA,GAAG,EAAED,GAAG,CAACE,IAAJ,GAAWD,GADa;AAE7BE,UAAAA,SAAS,EAAEH,GAAG,CAACE,IAAJ,GAAWC,SAAX,CAAqBC,MAArB,EAFkB;AAG7BC,UAAAA,IAAI,EAAEL,GAAG,CAACE,IAAJ,GAAWG,IAHY;AAI7BC,UAAAA,IAAI,EAAEN,GAAG,CAACE,IAAJ,GAAWI;AAJY,SAAL;AAAA,OAA1B,CADS,CAAX;AAQD,KATe,CAAnB;AAWG,WAAOd,WAAP;AACD,GAbQ,EAaN,EAbM,CAAT;;AA8BA,MAAMe,OAAM,GAAGtB,WAAW,CAAC,YAAmB;AAAA,QAAlBK,QAAkB,uEAAP,EAAO;AAC5CC,IAAAA,WAAW,CAAC,UAAAiB,gBAAgB;AAAA,aAC1BrB,UAAU,CAACsB,MAAX,CAAkBD,gBAAlB,EAAoClB,QAApC,CAD0B;AAAA,KAAjB,CAAX;AAGA,qBAAuCA,QAAQ,CAAC,CAAD,CAA/C;AAAA,QAAQW,GAAR,cAAQA,GAAR;AAAA,QAAaE,SAAb,cAAaA,SAAb;AAAA,QAAwBE,IAAxB,cAAwBA,IAAxB;AAAA,QAA8BC,IAA9B,cAA8BA,IAA9B;AACAlB,IAAAA,QAAQ,CAACK,SAAT,GAAqBC,UAArB,CAAgC,OAAhC,EAAyCM,GAAzC,CAA6CC,GAA7C,EAAkDS,GAAlD,CAAsDpB,QAAQ,CAAC,CAAD,CAA9D;AACD,GANyB,EAMvB,EANuB,CAA1B;;AAQF,SACE,KAAC,UAAD;AACE,IAAA,QAAQ,EAAEA,QADZ;AAEE,IAAA,yBAAyB,EAAE,IAF7B;AAGE,IAAA,MAAM,EAAE,gBAAAA,QAAQ;AAAA,aAAIiB,OAAM,CAACjB,QAAD,CAAV;AAAA,KAHlB;AAIE,IAAA,IAAI,EAAE;AAEJW,MAAAA,GAAG,oBAAEb,QAAQ,CAACuB,IAAT,EAAF,8CAAE,eAAiBC,WAAnB,qBAAE,sBAA8BC;AAF/B;AAJR,IADF;AAcD,CAvDM","sourcesContent":["import React, {useState, useEffect, useCallback, useLayoutEffect} from 'react';\r\nimport { GiftedChat } from 'react-native-gifted-chat';\r\nimport { firebase } from \"../firebaseConfig/Config\";\r\n\r\nexport const ChatScreen = () => {\r\n    const [messages, setMessages] = useState([]);\r\n\r\n    useEffect(() => {\r\n   const unsubscribe= firebase.firestore().collection('chats').orderBy('createdAt', 'desc').onSnapshot(querySnapshot => {\r\n        setMessages(\r\n          querySnapshot.docs.map(doc => ({\r\n            _id: doc.data()._id,\r\n            createdAt: doc.data().createdAt.toDate(),\r\n            text: doc.data().text,\r\n            user: doc.data().user\r\n          }))\r\n        );\r\n      });\r\n  \r\n      return unsubscribe;\r\n    }, []);\r\n\r\n    // useEffect (() => {\r\n    // setMessages([\r\n    //     {\r\n    //     _id: 1,\r\n    //     text: 'Hello valuable customer. How may I help you?',\r\n    //     createdAt: new Date(),\r\n    //     user: {\r\n    //         _id: 2,\r\n    //         name: 'React Native',\r\n    //         avatar: 'https:\\/\\/randomuser.me\\/api\\/portraits\\/men\\/43.jpg',\r\n    //     },\r\n    //     },\r\n    // ])\r\n    // }, [])\r\n\r\n    const onSend = useCallback((messages = []) => {\r\n      setMessages(previousMessages =>\r\n        GiftedChat.append(previousMessages, messages)\r\n      );\r\n      const { _id, createdAt, text, user } = messages[0];    \r\n      firebase.firestore().collection('chats').doc(_id).set(messages[0])\r\n    }, []);\r\n  \r\n  return (\r\n    <GiftedChat\r\n      messages={messages}\r\n      showAvatarForEveryMessage={true}\r\n      onSend={messages => onSend(messages)}\r\n      user={{\r\n       // _id: firebase.firestore().id,\r\n        _id: firebase.auth()?.currentUser?.email,\r\n        // _id: firebase.auth()?.currentUser()?.email,\r\n        // name: firebase.auth()?.currentUser()?.DisplayName,\r\n        // avatar: firebase.auth()?.currentUser()?.PhotoURL,\r\n      }}\r\n    />\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}