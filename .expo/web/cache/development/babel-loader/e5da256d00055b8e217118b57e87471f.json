{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { CardField, useConfirmPayment } from \"@stripe/stripe-react-native\";\nimport { StripeProvider } from \"@stripe/stripe-react-native\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar API_URL = \"exp://192.168.10.7:19000\";\n\nvar FrontPay = function FrontPay() {\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      email = _useState2[0],\n      setEmail = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      cardDetails = _useState4[0],\n      setCardDetails = _useState4[1];\n\n  var _useConfirmPayment = useConfirmPayment(),\n      confirmPayment = _useConfirmPayment.confirmPayment,\n      loading = _useConfirmPayment.loading;\n\n  var fetchPaymentIntentClientSecret = function fetchPaymentIntentClientSecret() {\n    var response, _await$response$json, clientSecret, error;\n\n    return _regeneratorRuntime.async(function fetchPaymentIntentClientSecret$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch(API_URL + \"/create-payment-intent\", {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              }\n            }));\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 5:\n            _await$response$json = _context.sent;\n            clientSecret = _await$response$json.clientSecret;\n            error = _await$response$json.error;\n            return _context.abrupt(\"return\", {\n              clientSecret: clientSecret,\n              error: error\n            });\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var handlePayPress = function handlePayPress() {\n    var billingDetails, _await$fetchPaymentIn, clientSecret, error, _await$confirmPayment, paymentIntent, _error;\n\n    return _regeneratorRuntime.async(function handlePayPress$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(!(cardDetails != null && cardDetails.complete) || !email)) {\n              _context2.next = 3;\n              break;\n            }\n\n            Alert.alert(\"Please enter Complete card details and Email\");\n            return _context2.abrupt(\"return\");\n\n          case 3:\n            billingDetails = {\n              email: email\n            };\n            _context2.prev = 4;\n            _context2.next = 7;\n            return _regeneratorRuntime.awrap(fetchPaymentIntentClientSecret());\n\n          case 7:\n            _await$fetchPaymentIn = _context2.sent;\n            clientSecret = _await$fetchPaymentIn.clientSecret;\n            error = _await$fetchPaymentIn.error;\n\n            if (!error) {\n              _context2.next = 14;\n              break;\n            }\n\n            console.log(\"Unable to process payment\");\n            _context2.next = 20;\n            break;\n\n          case 14:\n            _context2.next = 16;\n            return _regeneratorRuntime.awrap(confirmPayment(clientSecret, {\n              type: \"Card\",\n              billingDetails: billingDetails\n            }));\n\n          case 16:\n            _await$confirmPayment = _context2.sent;\n            paymentIntent = _await$confirmPayment.paymentIntent;\n            _error = _await$confirmPayment.error;\n\n            if (_error) {\n              alert(\"Payment Confirmation Error \" + _error.message);\n            } else if (paymentIntent) {\n              alert(\"Payment Successful\");\n              console.log(\"Payment successful \", paymentIntent);\n            }\n\n          case 20:\n            _context2.next = 25;\n            break;\n\n          case 22:\n            _context2.prev = 22;\n            _context2.t0 = _context2[\"catch\"](4);\n            console.log(_context2.t0);\n\n          case 25:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[4, 22]], Promise);\n  };\n\n  return _jsx(StripeProvider, {\n    publishableKey: \"pk_test_51KUyU0D6nj42XXnpkY6AvTWvubbzv5F1wtstVHDZrncpc4KxfBjTaHJ4UFNGEALqfu6gzHlgAcFeNY3TuNCfPXtL00XxdTz5me\",\n    children: _jsxs(View, {\n      style: styles.container,\n      children: [_jsx(TextInput, {\n        autoCapitalize: \"none\",\n        placeholder: \"E-mail\",\n        keyboardType: \"email-address\",\n        onChange: function onChange(value) {\n          return setEmail(value.nativeEvent.text);\n        },\n        style: styles.input\n      }), _jsx(CardField, {\n        postalCodeEnabled: true,\n        placeholder: {\n          number: \"4242 4242 4242 4242\"\n        },\n        cardStyle: styles.card,\n        style: styles.cardContainer,\n        onCardChange: function onCardChange(cardDetails) {\n          setCardDetails(cardDetails);\n        }\n      }), _jsx(Button, {\n        onPress: handlePayPress,\n        title: \"FrontPay\",\n        disabled: loading\n      })]\n    })\n  });\n};\n\nexport default FrontPay;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: \"center\",\n    margin: 20\n  },\n  input: {\n    backgroundColor: \"#efefefef\",\n    borderRadius: 8,\n    fontSize: 20,\n    height: 50,\n    padding: 10\n  },\n  card: {\n    backgroundColor: \"#efefefef\"\n  },\n  cardContainer: {\n    height: 50,\n    marginVertical: 30\n  }\n});","map":{"version":3,"sources":["C:/Users/USER/signupp/Components/Pay.js"],"names":["React","useState","CardField","useConfirmPayment","StripeProvider","API_URL","FrontPay","email","setEmail","cardDetails","setCardDetails","confirmPayment","loading","fetchPaymentIntentClientSecret","fetch","method","headers","response","json","clientSecret","error","handlePayPress","complete","Alert","alert","billingDetails","console","log","type","paymentIntent","message","styles","container","value","nativeEvent","text","input","number","card","cardContainer","StyleSheet","create","flex","justifyContent","margin","backgroundColor","borderRadius","fontSize","height","padding","marginVertical"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { View, Text, StyleSheet, TextInput, Button, Alert } from \"react-native\";\r\nimport { CardField, useConfirmPayment } from \"@stripe/stripe-react-native\";\r\nimport { StripeProvider } from \"@stripe/stripe-react-native\";\r\n//ADD localhost address of your server\r\nconst API_URL = \"exp://192.168.10.7:19000\";\r\n\r\nconst FrontPay = () => {\r\n  const [email, setEmail] = useState();\r\n  const [cardDetails, setCardDetails] = useState();\r\n  const { confirmPayment, loading } = useConfirmPayment();\r\n\r\n  const fetchPaymentIntentClientSecret = async () => {\r\n    const response = await fetch(`${API_URL}/create-payment-intent`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n    const { clientSecret, error } = await response.json();\r\n    return { clientSecret, error };\r\n  };\r\n\r\n  const handlePayPress = async () => {\r\n    //1.Gather the customer's billing information (e.g., email)\r\n    if (!cardDetails?.complete || !email) {\r\n      Alert.alert(\"Please enter Complete card details and Email\");\r\n      return;\r\n    }\r\n    const billingDetails = {\r\n      email: email,\r\n    };\r\n    //2.Fetch the intent client secret from the backend\r\n    try {\r\n      const { clientSecret, error } = await fetchPaymentIntentClientSecret();\r\n      //2. confirm the payment\r\n      if (error) {\r\n        console.log(\"Unable to process payment\");\r\n      } else {\r\n        const { paymentIntent, error } = await confirmPayment(clientSecret, {\r\n          type: \"Card\",\r\n          billingDetails: billingDetails,\r\n        });\r\n        if (error) {\r\n          alert(`Payment Confirmation Error ${error.message}`);\r\n        } else if (paymentIntent) {\r\n          alert(\"Payment Successful\");\r\n          console.log(\"Payment successful \", paymentIntent);\r\n        }\r\n      }\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n    //3.Confirm the payment with the card details\r\n  };\r\n\r\n  return (\r\n    <StripeProvider publishableKey=\"pk_test_51KUyU0D6nj42XXnpkY6AvTWvubbzv5F1wtstVHDZrncpc4KxfBjTaHJ4UFNGEALqfu6gzHlgAcFeNY3TuNCfPXtL00XxdTz5me\">\r\n    <View style={styles.container}>\r\n      <TextInput\r\n        autoCapitalize=\"none\"\r\n        placeholder=\"E-mail\"\r\n        keyboardType=\"email-address\"\r\n        onChange={value => setEmail(value.nativeEvent.text)}\r\n        style={styles.input}\r\n      />\r\n      <CardField\r\n        postalCodeEnabled={true}\r\n        placeholder={{\r\n          number: \"4242 4242 4242 4242\",\r\n        }}\r\n        cardStyle={styles.card}\r\n        style={styles.cardContainer}\r\n        onCardChange={cardDetails => {\r\n          setCardDetails(cardDetails);\r\n        }}\r\n      />\r\n      <Button onPress={handlePayPress} title=\"FrontPay\" disabled={loading} />\r\n      </View>\r\n      </StripeProvider>\r\n  );\r\n};\r\nexport default FrontPay;\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: \"center\",\r\n    margin: 20,\r\n  },\r\n  input: {\r\n    backgroundColor: \"#efefefef\",\r\n\r\n    borderRadius: 8,\r\n    fontSize: 20,\r\n    height: 50,\r\n    padding: 10,\r\n  },\r\n  card: {\r\n    backgroundColor: \"#efefefef\",\r\n  },\r\n  cardContainer: {\r\n    height: 50,\r\n    marginVertical: 30,\r\n  },\r\n});"]},"metadata":{},"sourceType":"module"}