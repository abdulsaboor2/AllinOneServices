{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useRef, useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport LogBox from \"react-native-web/dist/exports/LogBox\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport MapView, { PROVIDER_GOOGLE, Marker, Polyline } from \"react-native-maps\";\nimport { getDirections } from \"../Style/getDirections\";\nimport MapViewDirections from \"react-native-maps-directions\";\nimport Constants from \"expo-constants\";\nimport * as Location from \"expo-location\";\nimport GoogleApi from \"../assets/GoogleApi\";\nimport { GooglePlacesAutocomplete } from \"react-native-google-places-autocomplete\";\nimport { MapDirection } from \"./Mapsource/MapDirection\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nLogBox.ignoreLogs([\"MapViewDirections Error: Error on GMAPS route request\"]);\nLogBox.ignoreLogs([\"Failed prop type: Invalid prop `origin` supplied to `MapViewDirections`, expected one of type [string, number]\"]);\nexport var MapScreen = function MapScreen() {\n  var _useState = useState({\n    latitude: {},\n    longitude: {},\n    latitudeDelta: {},\n    longitudeDelta: {}\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      location = _useState2[0],\n      setLocation = _useState2[1];\n\n  useEffect(function () {\n    var interval = setInterval(function () {\n      getLocation();\n    }, 9000);\n    return function () {\n      return clearInterval(interval);\n    };\n  }, []);\n\n  var getLocation = function getLocation() {\n    var _await$Location$reque, granted, _await$Location$getCu, _await$Location$getCu2, latitude, longitude;\n\n    return _regeneratorRuntime.async(function getLocation$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(Location.requestForegroundPermissionsAsync());\n\n          case 3:\n            _await$Location$reque = _context.sent;\n            granted = _await$Location$reque.granted;\n\n            if (granted) {\n              _context.next = 7;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 7:\n            _context.next = 9;\n            return _regeneratorRuntime.awrap(Location.getCurrentPositionAsync());\n\n          case 9:\n            _await$Location$getCu = _context.sent;\n            _await$Location$getCu2 = _await$Location$getCu.coords;\n            latitude = _await$Location$getCu2.latitude;\n            longitude = _await$Location$getCu2.longitude;\n            setLocation({\n              latitude: latitude.toString(),\n              longitude: longitude.toString(),\n              latitudeDelta: 0.000212699887515984465,\n              longitudeDelta: 0.000999999\n            });\n            _context.next = 19;\n            break;\n\n          case 16:\n            _context.prev = 16;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 19:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 16]], Promise);\n  };\n\n  console.log(\"Its current location\", location);\n\n  var _useState3 = useState({\n    latitude: 32.4884,\n    longitude: 74.5236,\n    latitudeDelta: 0.000212699887515984465,\n    longitudeDelta: 0.000999999\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      dummyDestination = _useState4[0],\n      setDummyDestination = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      start = _useState6[0],\n      setStart = _useState6[1];\n\n  var _useState7 = useState(),\n      _useState8 = _slicedToArray(_useState7, 2),\n      end = _useState8[0],\n      setEnd = _useState8[1];\n\n  var fetchStartCords = function fetchStartCords(lat, lng) {\n    setStart({\n      latitude: lat,\n      longitude: lng,\n      latitudeDelta: 0.000212699887515984465,\n      longitudeDelta: 0.000999999\n    });\n  };\n\n  var fetchDestinationCords = function fetchDestinationCords(lat, lng) {\n    setEnd({\n      latitude: lat,\n      longitude: lng,\n      latitudeDelta: 0.000212699887515984465,\n      longitudeDelta: 0.000999999\n    });\n  };\n\n  console.log(\"Its for static picup===>   \", start);\n  console.log(\"Its for static Distination===>    \", end);\n  var mapRef = useRef(null);\n\n  var _useState9 = useState({\n    latitude: 30.3753,\n    longitude: 69.3451,\n    latitudeDelta: 0.000212699887515984465,\n    longitudeDelta: 0.000999999\n  }),\n      _useState10 = _slicedToArray(_useState9, 2),\n      mapOrigion = _useState10[0],\n      setMapOrigion = _useState10[1];\n\n  var _useState11 = useState({\n    Time: 0,\n    distance: 0\n  }),\n      _useState12 = _slicedToArray(_useState11, 2),\n      tmState = _useState12[0],\n      setTmState = _useState12[1];\n\n  var fetchTimeDuration = function fetchTimeDuration(t, d) {\n    setTmState({\n      Time: t.toFixed(0),\n      distance: d.toFixed(1)\n    });\n  };\n\n  var fetchNearestPlacesFromGoogle = function fetchNearestPlacesFromGoogle() {\n    var latitude = 25.0756;\n    var longitude = 55.1454;\n    var radMetter = 2 * 1000;\n    var url = 'https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=' + latitude + ',' + longitude + '&radius=' + radMetter + '&key=' + GoogleApi;\n    fetch(url).then(function (res) {\n      return res.json();\n    }).then(function (res) {\n      var places = [];\n\n      for (var _iterator = _createForOfIteratorHelperLoose(res.results), _step; !(_step = _iterator()).done;) {\n        var googlePlace = _step.value;\n        var place = {};\n        var lat = googlePlace.geometry.location.lat;\n        var lng = googlePlace.geometry.location.lng;\n        var coordinate = {\n          latitude: lat,\n          longitude: lng\n        };\n        var gallery = [];\n\n        if (googlePlace.photos) {\n          for (var _iterator2 = _createForOfIteratorHelperLoose(googlePlace.photos), _step2; !(_step2 = _iterator2()).done;) {\n            var photo = _step2.value;\n            var photoUrl = Urls.GooglePicBaseUrl + photo.photo_reference;\n            gallery.push(photoUrl);\n          }\n        }\n\n        place['placeTypes'] = googlePlace.types;\n        place['coordinate'] = coordinate;\n        place['placeId'] = googlePlace.place_id;\n        place['placeName'] = googlePlace.name;\n        place['gallery'] = gallery;\n        places.push(place);\n      }\n    }).catch(function (error) {\n      console.log(error);\n    });\n  };\n\n  return _jsxs(View, {\n    children: [_jsx(View, {\n      style: {\n        flexDirection: \"row\"\n      }\n    }), _jsx(View, {\n      style: {},\n      children: _jsxs(MapView, {\n        showsUserLocation: true,\n        provider: PROVIDER_GOOGLE,\n        zoomEnabled: true,\n        style: {\n          alignSelf: \"stretch\",\n          height: \"100%\"\n        },\n        initialRegion: mapOrigion,\n        followUserLocation: true,\n        ref: mapRef,\n        children: [Object.keys(dummyDestination).length > 0 && _jsx(Marker, {\n          coordinate: dummyDestination,\n          image: require(\"../assets/HelperIcon/electrician11.png\"),\n          height: 10,\n          width: 10\n        }), Object.keys(dummyDestination).length > 0 && _jsx(MapViewDirections, {\n          origin: location,\n          destination: dummyDestination,\n          apikey: GoogleApi.Google_Api,\n          strokeWidth: 6,\n          strokeColor: \"hotpink\",\n          optimizeWaypoints: true,\n          onReady: function onReady(result) {\n            console.log(\"Time is ===> \" + result.distance + \" km\");\n            console.log(\"Time is ===> \" + result.duration + \" min\");\n            fetchTimeDuration(result.duration, result.distance);\n            mapRef.current.fitToCoordinates(result.coordinates, {\n              edgepedding: {\n                right: 30,\n                botton: 300,\n                left: 30,\n                top: 100\n              }\n            });\n          }\n        }), _jsxs(View, {\n          style: styles.TDSty,\n          children: [_jsxs(View, {\n            style: {\n              paddingLeft: 40,\n              paddingTop: 20,\n              justifyContent: 'space-evenly',\n              alignItems: 'center',\n              position: 'absolute'\n            },\n            children: [_jsxs(Text, {\n              style: styles.TextSty,\n              children: [tmState.Time, \" min's\"]\n            }), _jsx(Text, {\n              style: styles.TextdarkSty,\n              children: \"Estimated Time\"\n            })]\n          }), _jsxs(View, {\n            style: {\n              paddingLeft: 240,\n              paddingTop: 20,\n              justifyContent: 'space-evenly',\n              alignContent: 'center',\n              alignItems: 'center',\n              position: 'absolute'\n            },\n            children: [_jsxs(Text, {\n              style: styles.TextSty,\n              children: [tmState.distance, \" Km's\"]\n            }), _jsx(Text, {\n              style: styles.TextdarkSty,\n              children: \"Distance\"\n            })]\n          })]\n        }), _jsx(TouchableOpacity, {\n          style: {\n            marginTop: 100\n          },\n          onPress: fetchNearestPlacesFromGoogle,\n          children: _jsx(Text, {\n            children: \"Fetch\"\n          })\n        })]\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  TDSty: {\n    height: 60,\n    backgroundColor: \"#ffff\",\n    width: \"90%\",\n    alignSelf: \"center\",\n    borderRadius: 20,\n    flexDirection: \"row\",\n    marginTop: 15,\n    justifyContent: 'space-between',\n    padding: 10,\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 4\n    },\n    shadowOpacity: 0.4,\n    shadowRadius: 4.65\n  },\n  TextSty: {\n    fontSize: 27,\n    fontWeight: \"bold\",\n    color: \"green\"\n  },\n  TextdarkSty: {\n    color: \"gray\",\n    fontSize: 12\n  }\n});","map":{"version":3,"sources":["C:/Users/USER/signupp/Components/MapScreen.js"],"names":["React","useState","useRef","useEffect","MapView","PROVIDER_GOOGLE","Marker","Polyline","getDirections","MapViewDirections","Constants","Location","GoogleApi","GooglePlacesAutocomplete","MapDirection","LogBox","ignoreLogs","MapScreen","latitude","longitude","latitudeDelta","longitudeDelta","location","setLocation","interval","setInterval","getLocation","clearInterval","requestForegroundPermissionsAsync","granted","getCurrentPositionAsync","coords","toString","console","log","dummyDestination","setDummyDestination","start","setStart","end","setEnd","fetchStartCords","lat","lng","fetchDestinationCords","mapRef","mapOrigion","setMapOrigion","Time","distance","tmState","setTmState","fetchTimeDuration","t","d","toFixed","fetchNearestPlacesFromGoogle","radMetter","url","fetch","then","res","json","places","results","googlePlace","place","geometry","coordinate","gallery","photos","photo","photoUrl","Urls","GooglePicBaseUrl","photo_reference","push","types","place_id","name","catch","error","flexDirection","alignSelf","height","Object","keys","length","require","Google_Api","result","duration","current","fitToCoordinates","coordinates","edgepedding","right","botton","left","top","styles","TDSty","paddingLeft","paddingTop","justifyContent","alignItems","position","TextSty","TextdarkSty","alignContent","marginTop","StyleSheet","create","backgroundColor","width","borderRadius","padding","shadowColor","shadowOffset","shadowOpacity","shadowRadius","fontSize","fontWeight","color"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,SAAlC,QAAmD,OAAnD;;;;;;;AAEA,OAAOC,OAAP,IAAkBC,eAAlB,EAAmCC,MAAnC,EAA2CC,QAA3C,QAA2D,mBAA3D;AACA,SAASC,aAAT;AACA,OAAOC,iBAAP,MAA8B,8BAA9B;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AACA,OAAO,KAAKC,QAAZ,MAA0B,eAA1B;AACA,OAAOC,SAAP;AACA,SAASC,wBAAT,QAAyC,yCAAzC;AACA,SAASC,YAAT;;;AACAC,MAAM,CAACC,UAAP,CAAkB,CAAC,uDAAD,CAAlB;AACAD,MAAM,CAACC,UAAP,CAAkB,CAChB,gHADgB,CAAlB;AAGA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AAE7B,kBAAgChB,QAAQ,CAAC;AACvCiB,IAAAA,QAAQ,EAAE,EAD6B;AAEvCC,IAAAA,SAAS,EAAE,EAF4B;AAGvCC,IAAAA,aAAa,EAAE,EAHwB;AAIvCC,IAAAA,cAAc,EAAE;AAJuB,GAAD,CAAxC;AAAA;AAAA,MAAOC,QAAP;AAAA,MAAiBC,WAAjB;;AAQApB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMqB,QAAQ,GAAGC,WAAW,CAAC,YAAM;AACjCC,MAAAA,WAAW;AACZ,KAF2B,EAEzB,IAFyB,CAA5B;AAGA,WAAO;AAAA,aAAMC,aAAa,CAACH,QAAD,CAAnB;AAAA,KAAP;AACD,GALQ,EAKN,EALM,CAAT;;AAQA,MAAME,WAAW,GAAG,SAAdA,WAAc;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEUf,QAAQ,CAACiB,iCAAT,EAFV;;AAAA;AAAA;AAERC,YAAAA,OAFQ,yBAERA,OAFQ;;AAAA,gBAGXA,OAHW;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,6CAMNlB,QAAQ,CAACmB,uBAAT,EANM;;AAAA;AAAA;AAAA,2DAKdC,MALc;AAKJb,YAAAA,QALI,0BAKJA,QALI;AAKMC,YAAAA,SALN,0BAKMA,SALN;AAQhBI,YAAAA,WAAW,CAAC;AACVL,cAAAA,QAAQ,EAAEA,QAAQ,CAACc,QAAT,EADA;AAEVb,cAAAA,SAAS,EAAEA,SAAS,CAACa,QAAV,EAFD;AAGVZ,cAAAA,aAAa,EAAE,uBAHL;AAIVC,cAAAA,cAAc,EAAE;AAJN,aAAD,CAAX;AARgB;AAAA;;AAAA;AAAA;AAAA;AAehBY,YAAAA,OAAO,CAACC,GAAR;;AAfgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApB;;AAkBAD,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCZ,QAApC;;AAGA,mBAAgDrB,QAAQ,CAAC;AACvDiB,IAAAA,QAAQ,EAAE,OAD6C;AAEvDC,IAAAA,SAAS,EAAE,OAF4C;AAGvDC,IAAAA,aAAa,EAAE,uBAHwC;AAIvDC,IAAAA,cAAc,EAAE;AAJuC,GAAD,CAAxD;AAAA;AAAA,MAAOc,gBAAP;AAAA,MAAyBC,mBAAzB;;AAQA,mBAA0BnC,QAAQ,EAAlC;AAAA;AAAA,MAAOoC,KAAP;AAAA,MAAcC,QAAd;;AACA,mBAAsBrC,QAAQ,EAA9B;AAAA;AAAA,MAAOsC,GAAP;AAAA,MAAYC,MAAZ;;AAEA,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,GAAD,EAAMC,GAAN,EAAc;AAGpCL,IAAAA,QAAQ,CAAC;AACPpB,MAAAA,QAAQ,EAAEwB,GADH;AAEPvB,MAAAA,SAAS,EAAEwB,GAFJ;AAGPvB,MAAAA,aAAa,EAAE,uBAHR;AAIPC,MAAAA,cAAc,EAAE;AAJT,KAAD,CAAR;AAMD,GATD;;AAUA,MAAMuB,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACF,GAAD,EAAMC,GAAN,EAAc;AAG1CH,IAAAA,MAAM,CAAC;AACLtB,MAAAA,QAAQ,EAAEwB,GADL;AAELvB,MAAAA,SAAS,EAAEwB,GAFN;AAGLvB,MAAAA,aAAa,EAAE,uBAHV;AAILC,MAAAA,cAAc,EAAE;AAJX,KAAD,CAAN;AAMD,GATD;;AAUAY,EAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2CG,KAA3C;AACAJ,EAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ,EAAkDK,GAAlD;AAEA,MAAMM,MAAM,GAAG3C,MAAM,CAAC,IAAD,CAArB;;AAIA,mBAAoCD,QAAQ,CAAC;AAC3CiB,IAAAA,QAAQ,EAAE,OADiC;AAE3CC,IAAAA,SAAS,EAAE,OAFgC;AAG3CC,IAAAA,aAAa,EAAE,uBAH4B;AAI3CC,IAAAA,cAAc,EAAE;AAJ2B,GAAD,CAA5C;AAAA;AAAA,MAAOyB,UAAP;AAAA,MAAmBC,aAAnB;;AAiBA,oBAA8B9C,QAAQ,CAAC;AACrC+C,IAAAA,IAAI,EAAE,CAD+B;AAErCC,IAAAA,QAAQ,EAAE;AAF2B,GAAD,CAAtC;AAAA;AAAA,MAAOC,OAAP;AAAA,MAAgBC,UAAhB;;AAIA,MAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,CAAD,EAAIC,CAAJ,EAAU;AAClCH,IAAAA,UAAU,CAAC;AACTH,MAAAA,IAAI,EAAEK,CAAC,CAACE,OAAF,CAAU,CAAV,CADG;AAETN,MAAAA,QAAQ,EAAEK,CAAC,CAACC,OAAF,CAAU,CAAV;AAFD,KAAD,CAAV;AAID,GALD;;AAQD,MAAMC,4BAA4B,GAAG,SAA/BA,4BAA+B,GAAM;AAExC,QAAMtC,QAAQ,GAAG,OAAjB;AACA,QAAMC,SAAS,GAAG,OAAlB;AACA,QAAIsC,SAAS,GAAG,IAAI,IAApB;AAEA,QAAMC,GAAG,GAAG,2EAA2ExC,QAA3E,GAAsF,GAAtF,GAA4FC,SAA5F,GAAwG,UAAxG,GAAqHsC,SAArH,GAAiI,OAAjI,GAA2I7C,SAAvJ;AAEA+C,IAAAA,KAAK,CAACD,GAAD,CAAL,CACGE,IADH,CACQ,UAAAC,GAAG,EAAI;AACX,aAAOA,GAAG,CAACC,IAAJ,EAAP;AACD,KAHH,EAIGF,IAJH,CAIQ,UAAAC,GAAG,EAAI;AAEb,UAAIE,MAAM,GAAG,EAAb;;AACE,2DAAuBF,GAAG,CAACG,OAA3B,wCAAoC;AAAA,YAA5BC,WAA4B;AAClC,YAAIC,KAAK,GAAG,EAAZ;AACA,YAAIxB,GAAG,GAAGuB,WAAW,CAACE,QAAZ,CAAqB7C,QAArB,CAA8BoB,GAAxC;AACA,YAAIC,GAAG,GAAGsB,WAAW,CAACE,QAAZ,CAAqB7C,QAArB,CAA8BqB,GAAxC;AACA,YAAIyB,UAAU,GAAG;AACflD,UAAAA,QAAQ,EAAEwB,GADK;AAEfvB,UAAAA,SAAS,EAAEwB;AAFI,SAAjB;AAKA,YAAI0B,OAAO,GAAG,EAAd;;AAEA,YAAIJ,WAAW,CAACK,MAAhB,EAAwB;AACvB,gEAAiBL,WAAW,CAACK,MAA7B,2CAAqC;AAAA,gBAA7BC,KAA6B;AACnC,gBAAIC,QAAQ,GAAGC,IAAI,CAACC,gBAAL,GAAwBH,KAAK,CAACI,eAA7C;AACAN,YAAAA,OAAO,CAACO,IAAR,CAAaJ,QAAb;AACF;AACF;;AAECN,QAAAA,KAAK,CAAC,YAAD,CAAL,GAAsBD,WAAW,CAACY,KAAlC;AACAX,QAAAA,KAAK,CAAC,YAAD,CAAL,GAAsBE,UAAtB;AACAF,QAAAA,KAAK,CAAC,SAAD,CAAL,GAAmBD,WAAW,CAACa,QAA/B;AACAZ,QAAAA,KAAK,CAAC,WAAD,CAAL,GAAqBD,WAAW,CAACc,IAAjC;AACAb,QAAAA,KAAK,CAAC,SAAD,CAAL,GAAmBG,OAAnB;AAEAN,QAAAA,MAAM,CAACa,IAAP,CAAYV,KAAZ;AACD;AAGF,KAnCH,EAoCGc,KApCH,CAoCS,UAAAC,KAAK,EAAI;AACdhD,MAAAA,OAAO,CAACC,GAAR,CAAY+C,KAAZ;AACD,KAtCH;AAwCD,GAhDF;;AAiDC,SACE,MAAC,IAAD;AAAA,eACE,KAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAAEC,QAAAA,aAAa,EAAE;AAAjB;AAAb,MADF,EAWE,KAAC,IAAD;AAAM,MAAA,KAAK,EAAE,EAAb;AAAA,gBACE,MAAC,OAAD;AACE,QAAA,iBAAiB,EAAE,IADrB;AAEE,QAAA,QAAQ,EAAE7E,eAFZ;AAGE,QAAA,WAAW,EAAE,IAHf;AAIE,QAAA,KAAK,EAAE;AAAE8E,UAAAA,SAAS,EAAE,SAAb;AAAwBC,UAAAA,MAAM,EAAE;AAAhC,SAJT;AAKE,QAAA,aAAa,EAAEtC,UALjB;AAME,QAAA,kBAAkB,EAAE,IANtB;AAOE,QAAA,GAAG,EAAED,MAPP;AAAA,mBAiBGwC,MAAM,CAACC,IAAP,CAAYnD,gBAAZ,EAA8BoD,MAA9B,GAAuC,CAAvC,IACC,KAAC,MAAD;AAAQ,UAAA,UAAU,EAAEpD,gBAApB;AACA,UAAA,KAAK,EAAEqD,OAAO,0CADd;AAEA,UAAA,MAAM,EAAE,EAFR;AAGA,UAAA,KAAK,EAAE;AAHP,UAlBJ,EAuBGH,MAAM,CAACC,IAAP,CAAYnD,gBAAZ,EAA8BoD,MAA9B,GAAuC,CAAvC,IACC,KAAC,iBAAD;AACE,UAAA,MAAM,EAAEjE,QADV;AAEE,UAAA,WAAW,EAAEa,gBAFf;AAGE,UAAA,MAAM,EAAEvB,SAAS,CAAC6E,UAHpB;AAIE,UAAA,WAAW,EAAE,CAJf;AAKE,UAAA,WAAW,EAAE,SALf;AAME,UAAA,iBAAiB,EAAE,IANrB;AAOE,UAAA,OAAO,EAAE,iBAACC,MAAD,EAAY;AACnBzD,YAAAA,OAAO,CAACC,GAAR,mBAA4BwD,MAAM,CAACzC,QAAnC;AACAhB,YAAAA,OAAO,CAACC,GAAR,mBAA4BwD,MAAM,CAACC,QAAnC;AACAvC,YAAAA,iBAAiB,CAACsC,MAAM,CAACC,QAAR,EAAkBD,MAAM,CAACzC,QAAzB,CAAjB;AACAJ,YAAAA,MAAM,CAAC+C,OAAP,CAAeC,gBAAf,CAAgCH,MAAM,CAACI,WAAvC,EAAoD;AAClDC,cAAAA,WAAW,EAAE;AACXC,gBAAAA,KAAK,EAAE,EADI;AAEXC,gBAAAA,MAAM,EAAE,GAFG;AAGXC,gBAAAA,IAAI,EAAE,EAHK;AAIXC,gBAAAA,GAAG,EAAE;AAJM;AADqC,aAApD;AAQD;AAnBH,UAxBJ,EAiEE,MAAC,IAAD;AAAM,UAAA,KAAK,EAAEC,MAAM,CAACC,KAApB;AAAA,qBACE,MAAC,IAAD;AAAM,YAAA,KAAK,EAAE;AAACC,cAAAA,WAAW,EAAC,EAAb;AAAgBC,cAAAA,UAAU,EAAC,EAA3B;AAA8BC,cAAAA,cAAc,EAAC,cAA7C;AAA4DC,cAAAA,UAAU,EAAC,QAAvE;AAAgFC,cAAAA,QAAQ,EAAC;AAAzF,aAAb;AAAA,uBACE,MAAC,IAAD;AAAM,cAAA,KAAK,EAAEN,MAAM,CAACO,OAApB;AAAA,yBAA8BzD,OAAO,CAACF,IAAtC;AAAA,cADF,EAEE,KAAC,IAAD;AAAM,cAAA,KAAK,EAAEoD,MAAM,CAACQ,WAApB;AAAA;AAAA,cAFF;AAAA,YADF,EAKE,MAAC,IAAD;AAAM,YAAA,KAAK,EAAE;AAACN,cAAAA,WAAW,EAAC,GAAb;AAAiBC,cAAAA,UAAU,EAAC,EAA5B;AAA+BC,cAAAA,cAAc,EAAC,cAA9C;AAA6DK,cAAAA,YAAY,EAAC,QAA1E;AAAmFJ,cAAAA,UAAU,EAAC,QAA9F;AAAuGC,cAAAA,QAAQ,EAAC;AAAhH,aAAb;AAAA,uBACE,MAAC,IAAD;AAAM,cAAA,KAAK,EAAEN,MAAM,CAACO,OAApB;AAAA,yBAA8BzD,OAAO,CAACD,QAAtC;AAAA,cADF,EAEE,KAAC,IAAD;AAAM,cAAA,KAAK,EAAEmD,MAAM,CAACQ,WAApB;AAAA;AAAA,cAFF;AAAA,YALF;AAAA,UAjEF,EA6EE,KAAC,gBAAD;AAAkB,UAAA,KAAK,EAAE;AAACE,YAAAA,SAAS,EAAC;AAAX,WAAzB;AAA0C,UAAA,OAAO,EAAEtD,4BAAnD;AAAA,oBAAiF,KAAC,IAAD;AAAA;AAAA;AAAjF,UA7EF;AAAA;AADF,MAXF;AAAA,IADF;AA+FD,CA1PM;AA4PP,IAAM4C,MAAM,GAAGW,UAAU,CAACC,MAAX,CAAkB;AAC/BX,EAAAA,KAAK,EAAE;AACLjB,IAAAA,MAAM,EAAE,EADH;AAEL6B,IAAAA,eAAe,EAAE,OAFZ;AAGLC,IAAAA,KAAK,EAAE,KAHF;AAIL/B,IAAAA,SAAS,EAAE,QAJN;AAKLgC,IAAAA,YAAY,EAAE,EALT;AAMLjC,IAAAA,aAAa,EAAE,KANV;AAOL4B,IAAAA,SAAS,EAAE,EAPN;AAQLN,IAAAA,cAAc,EAAE,eARX;AASLY,IAAAA,OAAO,EAAE,EATJ;AAULC,IAAAA,WAAW,EAAE,MAVR;AAWLC,IAAAA,YAAY,EAAE;AACZJ,MAAAA,KAAK,EAAE,CADK;AAEZ9B,MAAAA,MAAM,EAAE;AAFI,KAXT;AAeLmC,IAAAA,aAAa,EAAE,GAfV;AAgBLC,IAAAA,YAAY,EAAE;AAhBT,GADwB;AAmB/Bb,EAAAA,OAAO,EAAE;AACPc,IAAAA,QAAQ,EAAE,EADH;AAEPC,IAAAA,UAAU,EAAE,MAFL;AAGPC,IAAAA,KAAK,EAAE;AAHA,GAnBsB;AAwB/Bf,EAAAA,WAAW,EAAE;AACXe,IAAAA,KAAK,EAAE,MADI;AAEXF,IAAAA,QAAQ,EAAE;AAFC;AAxBkB,CAAlB,CAAf","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport { View, StyleSheet, Text, Button, LogBox,TouchableOpacity } from \"react-native\";\r\nimport MapView, { PROVIDER_GOOGLE, Marker, Polyline } from \"react-native-maps\";\r\nimport { getDirections } from \"../Style/getDirections\";\r\nimport MapViewDirections from \"react-native-maps-directions\";\r\nimport Constants from \"expo-constants\";\r\nimport * as Location from \"expo-location\";\r\nimport GoogleApi from \"../assets/GoogleApi\";\r\nimport { GooglePlacesAutocomplete } from \"react-native-google-places-autocomplete\";\r\nimport { MapDirection } from \"./Mapsource/MapDirection\";\r\nLogBox.ignoreLogs([\"MapViewDirections Error: Error on GMAPS route request\"]);\r\nLogBox.ignoreLogs([\r\n  \"Failed prop type: Invalid prop `origin` supplied to `MapViewDirections`, expected one of type [string, number]\",\r\n]);\r\nexport const MapScreen = () => {\r\n  //State for getting current location\r\n  const [location, setLocation] = useState({\r\n    latitude: {},\r\n    longitude: {},\r\n    latitudeDelta: {},\r\n    longitudeDelta: {},\r\n  });\r\n\r\n  //Calling Getloction function in useEffect\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      getLocation();\r\n    }, 9000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  //Getting Current Location\r\n  const getLocation = async () => {\r\n    try {\r\n      const { granted } = await Location.requestForegroundPermissionsAsync();\r\n      if (!granted) return;\r\n      const {\r\n        coords: { latitude, longitude },\r\n      } = await Location.getCurrentPositionAsync();\r\n\r\n      setLocation({\r\n        latitude: latitude.toString(),\r\n        longitude: longitude.toString(),\r\n        latitudeDelta: 0.000212699887515984465,\r\n        longitudeDelta: 0.000999999,\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n  console.log(\"Its current location\", location);\r\n\r\n  //Create dummy destinantion\r\n  const [dummyDestination, setDummyDestination] = useState({\r\n    latitude: 32.4884,\r\n    longitude: 74.5236,\r\n    latitudeDelta: 0.000212699887515984465,\r\n    longitudeDelta: 0.000999999,\r\n  });\r\n\r\n  //for starting and ending point in written (Map view Direction)\r\n  const [start, setStart] = useState();\r\n  const [end, setEnd] = useState();\r\n\r\n  const fetchStartCords = (lat, lng) => {\r\n    // console.log(\"latitude.....\", lat)\r\n    // console.log(\"latitude.....\", lng)\r\n    setStart({\r\n      latitude: lat,\r\n      longitude: lng,\r\n      latitudeDelta: 0.000212699887515984465,\r\n      longitudeDelta: 0.000999999,\r\n    });\r\n  };\r\n  const fetchDestinationCords = (lat, lng) => {\r\n    // console.log(\"latitude.....\", lat)\r\n    // console.log(\"latitude.....\", lng)\r\n    setEnd({\r\n      latitude: lat,\r\n      longitude: lng,\r\n      latitudeDelta: 0.000212699887515984465,\r\n      longitudeDelta: 0.000999999,\r\n    });\r\n  };\r\n  console.log(\"Its for static picup===>   \", start);\r\n  console.log(\"Its for static Distination===>    \", end);\r\n\r\n  const mapRef = useRef(null);\r\n  //const [coords, setCoords] = useState([]);\r\n\r\n  //For setting Origion location its mean startup points\r\n  const [mapOrigion, setMapOrigion] = useState({\r\n    latitude: 30.3753,\r\n    longitude: 69.3451,\r\n    latitudeDelta: 0.000212699887515984465,\r\n    longitudeDelta: 0.000999999,\r\n  });\r\n\r\n  // useEffect(() => {\r\n  //   //fetch the coordinates and then store its value into the coords Hook.\r\n  //   getDirections(\"52.5200066,13.404954\", \"50.1109221,8.6821267\")\r\n  //     .then(coords => setCoords(coords))\r\n  //     .catch(err => console.log(\"Something went wrong\"));\r\n  // }, []);\r\n  // const goToTokyo = () => {\r\n  //   //Animate the user to new region. Complete this animation in 3 seconds\r\n  //   mapRef.current.animateToRegion(tokyoRegion, 3 * 1000);\r\n  // };\r\n  const [tmState, setTmState] = useState({\r\n    Time: 0,\r\n    distance: 0,\r\n  });\r\n  const fetchTimeDuration = (t, d) => {\r\n    setTmState({\r\n      Time: t.toFixed(0),\r\n      distance: d.toFixed(1),\r\n    });\r\n  };\r\n\r\n  //Fetch Neraby places\r\n const fetchNearestPlacesFromGoogle = () => {\r\n\r\n    const latitude = 25.0756; // you can update it with user's latitude & Longitude\r\n    const longitude = 55.1454;\r\n    let radMetter = 2 * 1000; // Search withing 2 KM radius\r\n\r\n    const url = 'https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=' + latitude + ',' + longitude + '&radius=' + radMetter + '&key=' + GoogleApi\r\n\r\n    fetch(url)\r\n      .then(res => {\r\n        return res.json()\r\n      })\r\n      .then(res => {\r\n\r\n      var places = [] // This Array WIll contain locations received from google\r\n        for(let googlePlace of res.results) {\r\n          var place = {}\r\n          var lat = googlePlace.geometry.location.lat;\r\n          var lng = googlePlace.geometry.location.lng;\r\n          var coordinate = {\r\n            latitude: lat,\r\n            longitude: lng,\r\n          }\r\n\r\n          var gallery = []\r\n\r\n          if (googlePlace.photos) {\r\n           for(let photo of googlePlace.photos) {\r\n             var photoUrl = Urls.GooglePicBaseUrl + photo.photo_reference;\r\n             gallery.push(photoUrl);\r\n          }\r\n        }\r\n\r\n          place['placeTypes'] = googlePlace.types\r\n          place['coordinate'] = coordinate\r\n          place['placeId'] = googlePlace.place_id\r\n          place['placeName'] = googlePlace.name\r\n          place['gallery'] = gallery\r\n\r\n          places.push(place);\r\n        }\r\n\r\n        // Do your work here with places Array\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n    \r\n  }\r\n  return (\r\n    <View>\r\n      <View style={{ flexDirection: \"row\" }}>\r\n        {/* <MapDirection\r\n          placehol={\"Enter Start Point\"}\r\n          fetchAddress={fetchStartCords}\r\n        /> */}\r\n        {/* <MapDirection\r\n          placehol={\"Enter Drop Point\"}\r\n          fetchAddress={fetchDestinationCords}\r\n        /> */}\r\n      </View>\r\n      <View style={{}}>\r\n        <MapView\r\n          showsUserLocation={true}\r\n          provider={PROVIDER_GOOGLE}\r\n          zoomEnabled={true}\r\n          style={{ alignSelf: \"stretch\", height: \"100%\" }}\r\n          initialRegion={mapOrigion}\r\n          followUserLocation={true}\r\n          ref={mapRef}\r\n          // onMapReady={goToInitialRegion.bind()}\r\n          //  onRegionChangeComplete={(region) => setRegion(region)}\r\n        >\r\n          {/* <Marker\r\n            coordinate={start}\r\n            image={require(\"../assets/rec.png\")}\r\n            height={10}\r\n            width={10}\r\n          />*/}\r\n          {Object.keys(dummyDestination).length > 0 && (\r\n            <Marker coordinate={dummyDestination}\r\n            image={require(\"../assets/HelperIcon/electrician11.png\")}\r\n            height={10}\r\n            width={10}/>\r\n          )}\r\n          {Object.keys(dummyDestination).length > 0 && (\r\n            <MapViewDirections\r\n              origin={location}\r\n              destination={dummyDestination}\r\n              apikey={GoogleApi.Google_Api}\r\n              strokeWidth={6}\r\n              strokeColor={\"hotpink\"}\r\n              optimizeWaypoints={true}\r\n              onReady={(result) => {\r\n                console.log(`Time is ===> ${result.distance} km`);\r\n                console.log(`Time is ===> ${result.duration} min`);\r\n                fetchTimeDuration(result.duration, result.distance);\r\n                mapRef.current.fitToCoordinates(result.coordinates, {\r\n                  edgepedding: {\r\n                    right: 30,\r\n                    botton: 300,\r\n                    left: 30,\r\n                    top: 100,\r\n                  },\r\n                });\r\n              }}\r\n            />\r\n          )}\r\n\r\n          {/* {coords.length > 0 && <Polyline coordinates={coords} />}\r\n        <Polyline\r\n        coordinates={[tokyoRegion, chibaRegion]} //specify our coordinates\r\n        strokeColor={\"#000\"}\r\n        strokeWidth={3}\r\n        lineDashPattern={[1]}\r\n      />\r\n\r\n        <Marker  coordinate={{ latitude: 52.5200066, longitude: 13.404954 }}\r\n          image={require('../assets/HelperIcon/electrician.png')}>\r\n\r\n     </Marker>\r\n        \r\n      </MapView>\r\n      <Text style={styles.text}>Current latitude: {region.latitude}</Text>\r\n    <Text style={styles.text}>Current longitude: {region.longitude}</Text>\r\n    <View style={styles.container}>*/}\r\n          {/* <Button title=\"Start\" /> */}\r\n          <View style={styles.TDSty} >\r\n            <View style={{paddingLeft:40,paddingTop:20,justifyContent:'space-evenly',alignItems:'center',position:'absolute'}}>\r\n              <Text style={styles.TextSty}>{tmState.Time} min's</Text>\r\n              <Text style={styles.TextdarkSty}>Estimated Time</Text>\r\n            </View>\r\n            <View style={{paddingLeft:240,paddingTop:20,justifyContent:'space-evenly',alignContent:'center',alignItems:'center',position:'absolute'}}>\r\n              <Text style={styles.TextSty}>{tmState.distance} Km's</Text>\r\n              <Text style={styles.TextdarkSty}>Distance</Text>\r\n            </View>\r\n            {/* <Text style={styles.TextSty}> Km's  {tmState.distance}</Text>\r\n            <Text style={styles.TextSty}>{tmState.Time} mins</Text> */}\r\n          </View>\r\n          <TouchableOpacity style={{marginTop:100}} onPress={fetchNearestPlacesFromGoogle}><Text>Fetch</Text></TouchableOpacity>\r\n        </MapView>\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  TDSty: {\r\n    height: 60,\r\n    backgroundColor: \"#ffff\",\r\n    width: \"90%\",\r\n    alignSelf: \"center\",\r\n    borderRadius: 20,\r\n    flexDirection: \"row\",\r\n    marginTop: 15,\r\n    justifyContent: 'space-between',\r\n    padding: 10,\r\n    shadowColor: \"#000\",\r\n    shadowOffset: {\r\n      width: 0,\r\n      height: 4,\r\n    },\r\n    shadowOpacity: 0.4,\r\n    shadowRadius: 4.65,\r\n  },\r\n  TextSty: {\r\n    fontSize: 27,\r\n    fontWeight: \"bold\",\r\n    color: \"green\",\r\n  },\r\n  TextdarkSty: {\r\n    color: \"gray\",\r\n    fontSize: 12,\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}