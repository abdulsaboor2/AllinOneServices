{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { CardField, useConfirmPayment } from \"@stripe/stripe-react-native\";\nimport { StripeProvider } from \"@stripe/stripe-react-native\";\nimport { ShowSuccess } from \"../Style/ErrorMessage\";\nimport { fetchPublishablekey } from \"./Helper\";\nimport { API_URL } from \"./firebaseConfig/Config\";\nimport { Boton } from \"../Style/Boton\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar FrontPay = function FrontPay(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      publishableKey = _useState2[0],\n      setpublishableKey = _useState2[1];\n\n  useEffect(function () {\n    function init() {\n      var publishableKey;\n      return _regeneratorRuntime.async(function init$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(fetchPublishablekey());\n\n            case 2:\n              publishableKey = _context.sent;\n\n              if (publishableKey) {\n                setpublishableKey(publishableKey);\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, []);\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      email = _useState4[0],\n      setEmail = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      cardDetails = _useState6[0],\n      setCardDetails = _useState6[1];\n\n  var _useConfirmPayment = useConfirmPayment(),\n      confirmPayment = _useConfirmPayment.confirmPayment,\n      loading = _useConfirmPayment.loading;\n\n  var handlePayPress = function handlePayPress() {\n    var response, _await$response$json, clientsecret, _await$confirmPayment, error, paymentIntent;\n\n    return _regeneratorRuntime.async(function handlePayPress$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(fetch(API_URL + \"/create-payment-intent\", {\n              method: \"POST\",\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                paymentMethodType: 'card',\n                currency: \"usd\"\n              })\n            }));\n\n          case 2:\n            response = _context2.sent;\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 5:\n            _await$response$json = _context2.sent;\n            clientsecret = _await$response$json.clientsecret;\n            _context2.next = 9;\n            return _regeneratorRuntime.awrap(confirmPayment(clientsecret, {\n              type: \"Card\",\n              billingDetails: {\n                email: email\n              }\n            }));\n\n          case 9:\n            _await$confirmPayment = _context2.sent;\n            error = _await$confirmPayment.error;\n            paymentIntent = _await$confirmPayment.paymentIntent;\n\n            if (error) {\n              Alert.alert(\"Error code: \" + error.code, error.message);\n            } else if (paymentIntent) {\n              Alert.alert('Success', \" Payment successful: \" + paymentIntent.id);\n            }\n\n          case 13:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var paid = function paid() {\n    ShowSuccess(\"Payment successfuly sended\");\n    navigation.replace('Home');\n  };\n\n  return _jsx(StripeProvider, {\n    publishableKey: publishableKey,\n    children: _jsxs(View, {\n      style: styles.container,\n      children: [_jsx(View, {\n        style: {\n          marginTop: 40\n        },\n        children: _jsx(Text, {\n          style: {\n            fontSize: 35,\n            marginLeft: 15,\n            color: \"#1976d2\",\n            fontWeight: \"bold\",\n            marginBottom: 90\n          },\n          children: \"Payment\"\n        })\n      }), _jsx(TextInput, {\n        autoCapitalize: \"none\",\n        placeholder: \"E-mail\",\n        keyboardType: \"email-address\",\n        onChange: function onChange(value) {\n          return setEmail(value.nativeEvent.text);\n        },\n        style: styles.input\n      }), _jsx(CardField, {\n        postalCodeEnabled: false,\n        placeholder: {\n          number: \"4242 4242 4242 4242\"\n        },\n        cardStyle: styles.card,\n        style: styles.cardContainer,\n        onCardChange: function onCardChange(cardDetails) {\n          setCardDetails(cardDetails);\n        }\n      }), _jsx(View, {\n        style: {\n          alignSelf: 'center',\n          marginTop: 25\n        },\n        children: _jsx(Boton, {\n          widt: 200,\n          title: \"Payment\",\n          onPress: paid\n        })\n      })]\n    })\n  });\n};\n\nexport default FrontPay;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    margin: 20,\n    marginTop: 20\n  },\n  input: {\n    backgroundColor: \"#e0e0e0\",\n    borderRadius: 8,\n    fontSize: 20,\n    height: 50,\n    padding: 10\n  },\n  card: {\n    backgroundColor: \"#e0e0e0\"\n  },\n  cardContainer: {\n    height: 50,\n    marginVertical: 30\n  }\n});","map":{"version":3,"sources":["C:/Users/USER/signupp/Components/Pay.js"],"names":["React","useEffect","useState","CardField","useConfirmPayment","StripeProvider","ShowSuccess","fetchPublishablekey","API_URL","Boton","FrontPay","navigation","publishableKey","setpublishableKey","init","email","setEmail","cardDetails","setCardDetails","confirmPayment","loading","handlePayPress","fetch","method","headers","body","JSON","stringify","paymentMethodType","currency","response","json","clientsecret","type","billingDetails","error","paymentIntent","Alert","alert","code","message","id","paid","replace","styles","container","marginTop","fontSize","marginLeft","color","fontWeight","marginBottom","value","nativeEvent","text","input","number","card","cardContainer","alignSelf","StyleSheet","create","flex","margin","backgroundColor","borderRadius","height","padding","marginVertical"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { View, Text, StyleSheet, TextInput, Button, Alert } from \"react-native\";\r\nimport { CardField, useConfirmPayment } from \"@stripe/stripe-react-native\";\r\nimport { StripeProvider } from \"@stripe/stripe-react-native\";\r\nimport { ShowSuccess } from \"../Style/ErrorMessage\";\r\n//ADD localhost address of your server\r\nimport { fetchPublishablekey } from \"./Helper\";\r\nimport { API_URL } from \"./firebaseConfig/Config\";\r\nimport { Boton } from \"../Style/Boton\";\r\n\r\nconst FrontPay = ({navigation}) => {\r\n const [publishableKey,setpublishableKey]=useState('')\r\n  useEffect(()=>{\r\n    async function init() {\r\n      const publishableKey = await fetchPublishablekey()\r\n      if (publishableKey) {\r\n        setpublishableKey(publishableKey)\r\n      }\r\n      }\r\n  }, []);\r\n  const [email, setEmail] = useState();\r\n  const [cardDetails, setCardDetails] = useState();\r\n  const { confirmPayment, loading } = useConfirmPayment();\r\n\r\n  // const fetchPaymentIntentClientSecret = async () => {\r\n  //   const response = await fetch(`${API_URL}/create-payment-intent`, {\r\n  //     method: \"POST\",\r\n  //     headers: {\r\n  //       \"Content-Type\": \"application/json\",\r\n  //     },\r\n  //   });\r\n  //   const { clientSecret, error } = await response.json();\r\n  //   return { clientSecret, error };\r\n  // };\r\n\r\n  const handlePayPress = async () => {\r\n    const response = await fetch(`${API_URL}/create-payment-intent`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        paymentMethodType: 'card',\r\n        currency: \"usd\"\r\n      })\r\n    })\r\n    const { clientsecret } = await response.json()\r\n    const { error, paymentIntent } = await confirmPayment(clientsecret, {\r\n      type: \"Card\",\r\n      billingDetails: { email }\r\n   \r\n    });\r\n    if (error) {\r\n      Alert.alert(`Error code: ${error.code}`, error.message)\r\n    } else if (paymentIntent) {\r\n      Alert.alert('Success', ` Payment successful: ${paymentIntent.id}`)\r\n    }\r\n  }\r\n  const paid = () => {\r\n    ShowSuccess(\"Payment successfuly sended\");\r\n    navigation.replace('Home');\r\n  }\r\n\r\n  return (\r\n    <StripeProvider publishableKey={publishableKey}>\r\n      <View style={styles.container}>\r\n      <View style={{ marginTop: 40 }}>\r\n          <Text\r\n        style={{\r\n          fontSize: 35,\r\n          marginLeft: 15,\r\n          color: \"#1976d2\",\r\n          fontWeight: \"bold\",\r\n          marginBottom:90\r\n        }}\r\n      >\r\n        Payment\r\n      </Text>\r\n          </View>\r\n      <TextInput\r\n        autoCapitalize=\"none\"\r\n        placeholder=\"E-mail\"\r\n        keyboardType=\"email-address\"\r\n        onChange={value => setEmail(value.nativeEvent.text)}\r\n        style={styles.input}\r\n      />\r\n      <CardField\r\n        postalCodeEnabled={false}\r\n        placeholder={{\r\n          number: \"4242 4242 4242 4242\",\r\n        }}\r\n        cardStyle={styles.card}\r\n        style={styles.cardContainer}\r\n        onCardChange={cardDetails => {\r\n          setCardDetails(cardDetails);\r\n        }}\r\n        />\r\n        <View style={{ alignSelf: 'center',marginTop:25 }} >\r\n          <Boton widt={200} title={\"Payment\"} onPress={paid}/>\r\n          </View>\r\n      {/* <Button onPress={handlePayPress} title=\"Pay\" backgroundColor='red' disabled={loading} /> */}\r\n      </View>\r\n      </StripeProvider>\r\n  );\r\n};\r\nexport default FrontPay;\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    // justifyContent: \"center\",\r\n    margin: 20,\r\n    marginTop:20\r\n\r\n  },\r\n  input: {\r\n    backgroundColor: \"#e0e0e0\",\r\n\r\n    borderRadius: 8,\r\n    fontSize: 20,\r\n    height: 50,\r\n    padding: 10,\r\n  },\r\n  card: {\r\n    backgroundColor: \"#e0e0e0\",\r\n  },\r\n  cardContainer: {\r\n    height: 50,\r\n    marginVertical: 30,\r\n  },\r\n});"]},"metadata":{},"sourceType":"module"}