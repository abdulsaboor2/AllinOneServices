{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport React, { useState } from \"react\";\nimport { HelperMapView } from \"./HelperMapView\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar HelperMapScreen = function HelperMapScreen() {\n  var _useState = useState(\"true\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      isEnable = _useState2[0],\n      setIsEnable = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var state = function state() {\n    setLoading(true);\n    setTimeout(function () {\n      setLoading(false);\n      alert('Now you are connected with new customer');\n    }, 5000);\n    setIsEnable(\"false\");\n  };\n\n  if (loading) {\n    return _jsx(View, {\n      style: {\n        justifyContent: \"center\",\n        flex: 1\n      },\n      children: _jsx(ActivityIndicator, {\n        size: \"large\",\n        color: \"gray\",\n        bool: \"false\"\n      })\n    });\n  }\n\n  return _jsx(View, {\n    children: isEnable == \"true\" ? _jsx(TouchableOpacity, {\n      onPress: function onPress() {\n        return state();\n      },\n      style: {\n        alignSelf: \"center\",\n        marginTop: 300\n      },\n      children: _jsx(Text, {\n        style: {\n          color: \"blue\"\n        },\n        children: \"Click me to Find Out New Request\"\n      })\n    }) : _jsx(HelperMapView, {})\n  });\n};\n\nexport default HelperMapScreen;","map":{"version":3,"sources":["C:/Users/USER/signupp/Components/HelperScr/HelperMapScreen/HelperMapScreen.js"],"names":["React","useState","HelperMapView","TouchableOpacity","HelperMapScreen","isEnable","setIsEnable","loading","setLoading","state","setTimeout","alert","justifyContent","flex","alignSelf","marginTop","color"],"mappings":";;;;AACA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,aAAT;AACA,SAASC,gBAAT,QAAiC,8BAAjC;;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC5B,kBAAgCH,QAAQ,CAAC,MAAD,CAAxC;AAAA;AAAA,MAAOI,QAAP;AAAA,MAAiBC,WAAjB;;AACA,mBAA8BL,QAAQ,CAAC,KAAD,CAAtC;AAAA;AAAA,MAAOM,OAAP;AAAA,MAAgBC,UAAhB;;AACA,MAAMC,KAAK,GAAG,SAARA,KAAQ,GAAM;AAClBD,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,IAAAA,UAAU,CAAC,YAAM;AACfF,MAAAA,UAAU,CAAC,KAAD,CAAV;AACDG,MAAAA,KAAK,CAAC,yCAAD,CAAL;AACA,KAHS,EAGP,IAHO,CAAV;AAIAL,IAAAA,WAAW,CAAC,OAAD,CAAX;AACD,GAPD;;AASA,MAAIC,OAAJ,EAAa;AACX,WACE,KAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAAEK,QAAAA,cAAc,EAAE,QAAlB;AAA4BC,QAAAA,IAAI,EAAE;AAAlC,OAAb;AAAA,gBACE,KAAC,iBAAD;AAAmB,QAAA,IAAI,EAAC,OAAxB;AAAgC,QAAA,KAAK,EAAC,MAAtC;AAA6C,QAAA,IAAI,EAAC;AAAlD;AADF,MADF;AAKD;;AAED,SACE,KAAC,IAAD;AAAA,cACGR,QAAQ,IAAI,MAAZ,GACC,KAAC,gBAAD;AAAkB,MAAA,OAAO,EAAE;AAAA,eAAMI,KAAK,EAAX;AAAA,OAA3B;AAA0C,MAAA,KAAK,EAAE;AAACK,QAAAA,SAAS,EAAC,QAAX;AAAoBC,QAAAA,SAAS,EAAC;AAA9B,OAAjD;AAAA,gBACE,KAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACC,UAAAA,KAAK,EAAC;AAAP,SAAb;AAAA;AAAA;AADF,MADD,GAKC,KAAC,aAAD;AANJ,IADF;AAWD,CA/BD;;AAiCA,eAAeZ,eAAf","sourcesContent":["import { View, Text,ActivityIndicator } from \"react-native\";\r\nimport React, { useState } from \"react\";\r\nimport { HelperMapView } from \"./HelperMapView\";\r\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\r\n\r\nconst HelperMapScreen = () => {\r\n  const [isEnable, setIsEnable] = useState(\"true\");\r\n  const [loading, setLoading] = useState(false);\r\n  const state = () => {\r\n    setLoading(true);\r\n    setTimeout(() => {\r\n      setLoading(false);\r\n     alert('Now you are connected with new customer');\r\n    }, 5000);\r\n    setIsEnable(\"false\");\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <View style={{ justifyContent: \"center\", flex: 1 }}>\r\n        <ActivityIndicator size=\"large\" color=\"gray\" bool=\"false\" />\r\n      </View>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <View>\r\n      {isEnable == \"true\" ? (\r\n        <TouchableOpacity onPress={() => state()} style={{alignSelf:\"center\",marginTop:300}}>\r\n          <Text style={{color:\"blue\"}}>Click me to Find Out New Request</Text>\r\n        </TouchableOpacity>\r\n      ) : (\r\n        <HelperMapView />\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default HelperMapScreen;\r\n"]},"metadata":{},"sourceType":"module"}