{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useRef, useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport LogBox from \"react-native-web/dist/exports/LogBox\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport MapView, { PROVIDER_GOOGLE, Marker, Polyline } from \"react-native-maps\";\nimport { FontAwesome5, Ionicons, MaterialIcons, Entypo } from \"@expo/vector-icons\";\nimport { getDirections } from \"../../Style/getDirections\";\nimport MapViewDirections from \"react-native-maps-directions\";\nimport Constants from \"expo-constants\";\nimport * as Location from \"expo-location\";\nimport GoogleApi from \"./GoogleApi\";\nimport { GooglePlacesAutocomplete } from \"react-native-google-places-autocomplete\";\nimport { MapDirection } from \"./MapDirection\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nLogBox.ignoreLogs([\"MapViewDirections Error: Error on GMAPS route request\"]);\nLogBox.ignoreLogs([\"Failed prop type: Invalid prop `origin` supplied to `MapViewDirections`, expected one of type [string, number]\"]);\nexport var MapScreen = function MapScreen(_ref) {\n  var route = _ref.route,\n      navigation = _ref.navigation;\n  var _route$params = route.params,\n      id = _route$params.id,\n      latis = _route$params.latis,\n      longis = _route$params.longis,\n      dis = _route$params.dis,\n      lat2 = _route$params.lat2,\n      lng2 = _route$params.lng2;\n  console.log(\"fffffffffffffff=====\", id, latis, longis, dis);\n\n  var _useState = useState({\n    latitude: lat2,\n    longitude: lng2\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      location = _useState2[0],\n      setLocation = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loading = _useState4[0],\n      setloading = _useState4[1];\n\n  var _useState5 = useState({\n    latitude: Number(latis),\n    longitude: Number(longis),\n    latitudeDelta: 0.00021269988751598446,\n    longitudeDelta: 0.000999999\n  }),\n      _useState6 = _slicedToArray(_useState5, 2),\n      helper = _useState6[0],\n      setHelper = _useState6[1];\n\n  console.log(\"hhhhhhhhhhhhhh\", helper);\n  useEffect(function () {\n    setloading(true);\n    var interval = setInterval(function () {\n      getLocation();\n      setloading(false);\n    }, 2000);\n    return function () {\n      return clearInterval(interval);\n    };\n  });\n\n  var getLocation = function getLocation() {\n    var _await$Location$reque, granted, _await$Location$getCu, _await$Location$getCu2, latitude, longitude;\n\n    return _regeneratorRuntime.async(function getLocation$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(Location.requestForegroundPermissionsAsync());\n\n          case 3:\n            _await$Location$reque = _context.sent;\n            granted = _await$Location$reque.granted;\n\n            if (granted) {\n              _context.next = 7;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 7:\n            _context.next = 9;\n            return _regeneratorRuntime.awrap(Location.getCurrentPositionAsync());\n\n          case 9:\n            _await$Location$getCu = _context.sent;\n            _await$Location$getCu2 = _await$Location$getCu.coords;\n            latitude = _await$Location$getCu2.latitude;\n            longitude = _await$Location$getCu2.longitude;\n            setLocation({\n              latitude: latitude.toString(),\n              longitude: longitude.toString()\n            });\n            _context.next = 19;\n            break;\n\n          case 16:\n            _context.prev = 16;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 19:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 16]], Promise);\n  };\n\n  console.log(\"Its current location\", location);\n\n  var _useState7 = useState({\n    latitude: 32.4884,\n    longitude: 74.5236,\n    latitudeDelta: 0.000212699887515984465,\n    longitudeDelta: 0.000999999\n  }),\n      _useState8 = _slicedToArray(_useState7, 2),\n      dummyDestination = _useState8[0],\n      setDummyDestination = _useState8[1];\n\n  var _useState9 = useState(),\n      _useState10 = _slicedToArray(_useState9, 2),\n      start = _useState10[0],\n      setStart = _useState10[1];\n\n  var _useState11 = useState(),\n      _useState12 = _slicedToArray(_useState11, 2),\n      end = _useState12[0],\n      setEnd = _useState12[1];\n\n  var fetchStartCords = function fetchStartCords(lat, lng) {\n    setStart({\n      latitude: lat,\n      longitude: lng,\n      latitudeDelta: 0.000212699887515984465,\n      longitudeDelta: 0.000999999\n    });\n  };\n\n  var fetchDestinationCords = function fetchDestinationCords(lat, lng) {\n    setEnd({\n      latitude: lat,\n      longitude: lng,\n      latitudeDelta: 0.000212699887515984465,\n      longitudeDelta: 0.000999999\n    });\n  };\n\n  console.log(\"Its for static picup===>   \", start);\n  console.log(\"Its for static Distination===>    \", end);\n  var mapRef = useRef(null);\n\n  var _useState13 = useState({\n    latitude: 30.3753,\n    longitude: 69.3451,\n    latitudeDelta: 0.000212699887515984465,\n    longitudeDelta: 0.000999999\n  }),\n      _useState14 = _slicedToArray(_useState13, 2),\n      mapOrigion = _useState14[0],\n      setMapOrigion = _useState14[1];\n\n  var _useState15 = useState({\n    Time: 0,\n    distance: 0\n  }),\n      _useState16 = _slicedToArray(_useState15, 2),\n      tmState = _useState16[0],\n      setTmState = _useState16[1];\n\n  var fetchTimeDuration = function fetchTimeDuration(t, d) {\n    setTmState({\n      Time: t.toFixed(0),\n      distance: d.toFixed(1)\n    });\n  };\n\n  var _useState17 = useState({\n    latitude: 32.47766203475993,\n    longitude: 74.50725950002612\n  }),\n      _useState18 = _slicedToArray(_useState17, 2),\n      pakkiKotli = _useState18[0],\n      setPakkiKotli = _useState18[1];\n\n  return _jsxs(View, {\n    children: [_jsx(StatusBar, {\n      barStyle: \"dark-content\"\n    }), _jsx(View, {\n      style: {\n        marginBottom: -90\n      },\n      children: _jsxs(MapView, {\n        showsUserLocation: true,\n        provider: PROVIDER_GOOGLE,\n        zoomEnabled: true,\n        style: {\n          alignSelf: \"stretch\",\n          height: \"88%\"\n        },\n        initialRegion: mapOrigion,\n        followUserLocation: true,\n        ref: mapRef,\n        children: [Object.keys(dummyDestination).length > 0 && _jsx(Marker, {\n          coordinate: helper,\n          image: require(\"../../assets/HelperImageIcon/electrician11.png\"),\n          title: \"rawasiya\",\n          description: \"i am a electrician for Helper app\"\n        }), Object.keys(dummyDestination).length > 0 && _jsx(MapViewDirections, {\n          origin: location,\n          destination: helper,\n          apikey: GoogleApi.Google_Api,\n          strokeWidth: 6,\n          strokeColor: \"red\",\n          optimizeWaypoints: true,\n          onReady: function onReady(result) {\n            console.log(\"Time is ===> \" + result.distance + \" km\");\n            console.log(\"Time is ===> \" + result.duration + \" min\");\n            fetchTimeDuration(result.duration, result.distance);\n            mapRef.current.fitToCoordinates(result.coordinates, {\n              edgepedding: {\n                right: 30,\n                botton: 300,\n                left: 30,\n                top: 100\n              }\n            });\n          }\n        }), _jsxs(View, {\n          style: styles.TDSty,\n          children: [_jsxs(View, {\n            style: {\n              paddingLeft: 40,\n              paddingTop: 20,\n              justifyContent: \"space-evenly\",\n              alignItems: \"center\",\n              position: \"absolute\"\n            },\n            children: [_jsxs(Text, {\n              style: styles.TextSty,\n              children: [tmState.Time, \" min's\"]\n            }), _jsx(Text, {\n              style: styles.TextdarkSty,\n              children: \"Estimated Time\"\n            })]\n          }), _jsxs(View, {\n            style: {\n              paddingLeft: 240,\n              paddingTop: 20,\n              justifyContent: \"space-evenly\",\n              alignContent: \"center\",\n              alignItems: \"center\",\n              position: \"absolute\"\n            },\n            children: [_jsxs(Text, {\n              style: styles.TextSty,\n              children: [dis, \" Km's\"]\n            }), _jsx(Text, {\n              style: styles.TextdarkSty,\n              children: \"Distance\"\n            })]\n          })]\n        })]\n      })\n    }), _jsx(View, {\n      style: styles.mapbottom,\n      children: _jsx(View, {\n        children: _jsxs(ScrollView, {\n          style: {\n            height: 160\n          },\n          showsVerticalScrollIndicator: false,\n          children: [_jsx(View, {\n            style: {\n              alignSelf: \"baseline\",\n              marginLeft: 180\n            },\n            children: _jsx(Ionicons, {\n              style: {\n                alignSelf: \"center\"\n              },\n              name: \"md-ellipsis-horizontal\",\n              size: 34,\n              color: \"gray\"\n            })\n          }), _jsxs(View, {\n            children: [_jsx(ActivityIndicator, {\n              size: \"small\",\n              color: \"gray\"\n            }), _jsx(Text, {\n              style: {\n                fontSize: 9,\n                alignSelf: 'center',\n                color: 'gray'\n              },\n              children: \"Work in Progress\"\n            })]\n          }), _jsxs(View, {\n            style: {\n              flexDirection: \"row\",\n              justifyContent: \"space-around\",\n              marginTop: 15\n            },\n            children: [_jsxs(View, {\n              children: [_jsx(Ionicons, {\n                name: \"timer\",\n                size: 37,\n                color: \"green\"\n              }), _jsxs(Text, {\n                style: styles.ttx,\n                children: [tmState.Time, \" min\"]\n              })]\n            }), _jsxs(View, {\n              children: [_jsx(MaterialIcons, {\n                name: \"attach-money\",\n                size: 37,\n                color: \"green\"\n              }), _jsx(Text, {\n                style: styles.ttx,\n                children: \"150 Rs\"\n              })]\n            }), _jsxs(View, {\n              children: [_jsx(Entypo, {\n                name: \"direction\",\n                size: 37,\n                color: \"green\"\n              }), _jsxs(Text, {\n                style: styles.ttx,\n                children: [dis, \" km\"]\n              })]\n            }), _jsxs(TouchableOpacity, {\n              children: [_jsx(Ionicons, {\n                name: \"chatbubble-ellipses-outline\",\n                size: 37,\n                color: \"green\"\n              }), _jsx(Text, {\n                style: styles.ttx,\n                children: \" Chat\"\n              })]\n            })]\n          }), _jsx(TouchableOpacity, {\n            style: styles.botonn,\n            onPress: function onPress() {\n              return navigation.navigate('Feed Back', {\n                id: id\n              });\n            },\n            children: _jsx(Text, {\n              style: {\n                alignSelf: 'center',\n                color: '#fff'\n              },\n              children: \"Work Done\"\n            })\n          }), _jsx(View, {\n            style: {\n              height: 50\n            }\n          })]\n        })\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  botonn: {\n    backgroundColor: \"green\",\n    borderRadius: 30,\n    width: 120,\n    height: 40,\n    alignSelf: \"center\",\n    alignContent: \"center\",\n    padding: 10,\n    marginTop: 20\n  },\n  mapbottom: {\n    backgroundColor: \"#ffff\",\n    height: 160,\n    marginBottom: -140,\n    borderTopEndRadius: 30,\n    borderTopStartRadius: 30,\n    shadowOffset: {\n      width: 0,\n      height: 4\n    },\n    shadowOpacity: 0.4,\n    shadowRadius: 4.65\n  },\n  ttx: {\n    color: \"gray\",\n    fontWeight: \"bold\",\n    fontSize: 12\n  },\n  TDSty: {\n    height: 60,\n    backgroundColor: \"#ffff\",\n    width: \"90%\",\n    alignSelf: \"center\",\n    borderRadius: 20,\n    flexDirection: \"row\",\n    marginTop: 15,\n    justifyContent: \"space-between\",\n    padding: 10,\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 4\n    },\n    shadowOpacity: 0.4,\n    shadowRadius: 4.65\n  },\n  TDSty2: {\n    height: 50,\n    backgroundColor: \"#ffff\",\n    width: \"30%\",\n    alignSelf: \"center\",\n    borderRadius: 20,\n    flexDirection: \"row\",\n    marginTop: 500,\n    justifyContent: \"center\",\n    padding: 10,\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 4,\n      height: 6\n    },\n    shadowOpacity: 0.8,\n    shadowRadius: 4.65,\n    backgroundColor: \"#00c853\"\n  },\n  TextSty: {\n    fontSize: 27,\n    fontWeight: \"bold\",\n    color: \"green\"\n  },\n  TextSty2: {\n    fontSize: 18,\n    fontWeight: \"bold\",\n    color: \"white\"\n  },\n  TextdarkSty: {\n    color: \"gray\",\n    fontSize: 12\n  }\n});","map":{"version":3,"sources":["C:/Users/USER/signupp/Components/Mapsource/MapScreen.js"],"names":["React","useState","useRef","useEffect","MapView","PROVIDER_GOOGLE","Marker","Polyline","FontAwesome5","Ionicons","MaterialIcons","Entypo","getDirections","MapViewDirections","Constants","Location","GoogleApi","GooglePlacesAutocomplete","MapDirection","LogBox","ignoreLogs","MapScreen","route","navigation","params","id","latis","longis","dis","lat2","lng2","console","log","latitude","longitude","location","setLocation","loading","setloading","Number","latitudeDelta","longitudeDelta","helper","setHelper","interval","setInterval","getLocation","clearInterval","requestForegroundPermissionsAsync","granted","getCurrentPositionAsync","coords","toString","dummyDestination","setDummyDestination","start","setStart","end","setEnd","fetchStartCords","lat","lng","fetchDestinationCords","mapRef","mapOrigion","setMapOrigion","Time","distance","tmState","setTmState","fetchTimeDuration","t","d","toFixed","pakkiKotli","setPakkiKotli","marginBottom","alignSelf","height","Object","keys","length","require","Google_Api","result","duration","current","fitToCoordinates","coordinates","edgepedding","right","botton","left","top","styles","TDSty","paddingLeft","paddingTop","justifyContent","alignItems","position","TextSty","TextdarkSty","alignContent","mapbottom","marginLeft","fontSize","color","flexDirection","marginTop","ttx","botonn","navigate","StyleSheet","create","backgroundColor","borderRadius","width","padding","borderTopEndRadius","borderTopStartRadius","shadowOffset","shadowOpacity","shadowRadius","fontWeight","shadowColor","TDSty2","TextSty2"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport {\r\n  View,\r\n  StyleSheet,\r\n  Text,\r\n  Button,\r\n  LogBox,\r\n  TouchableOpacity,\r\n  StatusBar,\r\n  ActivityIndicator,\r\n  ScrollView,\r\n} from \"react-native\";\r\nimport MapView, { PROVIDER_GOOGLE, Marker, Polyline } from \"react-native-maps\";\r\nimport {\r\n  FontAwesome5,\r\n  Ionicons,\r\n  MaterialIcons,\r\n  Entypo,\r\n} from \"@expo/vector-icons\";\r\nimport { getDirections } from \"../../Style/getDirections\";\r\nimport MapViewDirections from \"react-native-maps-directions\";\r\nimport Constants from \"expo-constants\";\r\nimport * as Location from \"expo-location\";\r\nimport GoogleApi from \"./GoogleApi\";\r\nimport { GooglePlacesAutocomplete } from \"react-native-google-places-autocomplete\";\r\nimport { MapDirection } from \"./MapDirection\";\r\nLogBox.ignoreLogs([\"MapViewDirections Error: Error on GMAPS route request\"]);\r\nLogBox.ignoreLogs([\r\n  \"Failed prop type: Invalid prop `origin` supplied to `MapViewDirections`, expected one of type [string, number]\",\r\n]);\r\nexport const MapScreen = ({ route, navigation }) => {\r\n  //State for getting current location\r\n  const { id, latis, longis, dis, lat2, lng2 } = route.params;\r\n  console.log(\"fffffffffffffff=====\", id, latis, longis, dis);\r\n  const [location, setLocation] = useState({\r\n    latitude: lat2,\r\n    longitude: lng2,\r\n  });\r\n  const [loading, setloading] = useState(true);\r\n\r\n  const [helper, setHelper] = useState({\r\n    latitude: Number(latis),\r\n    longitude: Number(longis),\r\n    latitudeDelta: 0.00021269988751598446,\r\n    longitudeDelta: 0.000999999,\r\n  });\r\n  console.log(\"hhhhhhhhhhhhhh\", helper);\r\n  //Calling Getloction function in useEffect\r\n  useEffect(() => {\r\n    setloading(true);\r\n    const interval = setInterval(() => {\r\n      getLocation();\r\n      setloading(false);\r\n    }, 2000);\r\n    return () => clearInterval(interval);\r\n  });\r\n  // if (loading) {\r\n  //  return( <View style={{flexDirection:'row',marginTop:-970,marginRight:-200}}>\r\n  //           <ActivityIndicator style={{marginRight:-390}} size=\"large\" color=\"blue\" />\r\n  //           </View>)\r\n  // }\r\n  //Getting Current Location\r\n  const getLocation = async () => {\r\n    try {\r\n      const { granted } = await Location.requestForegroundPermissionsAsync();\r\n      if (!granted) return;\r\n      const {\r\n        coords: { latitude, longitude },\r\n      } = await Location.getCurrentPositionAsync();\r\n\r\n      setLocation({\r\n        latitude: latitude.toString(),\r\n        longitude: longitude.toString(),\r\n        // latitudeDelta: 0.000212699887515984465,\r\n        // longitudeDelta: 0.000999999,\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n  console.log(\"Its current location\", location);\r\n\r\n  //Create dummy destinantion\r\n  const [dummyDestination, setDummyDestination] = useState({\r\n    latitude: 32.4884,\r\n    longitude: 74.5236,\r\n    latitudeDelta: 0.000212699887515984465,\r\n    longitudeDelta: 0.000999999,\r\n  });\r\n\r\n  //for starting and ending point in written (Map view Direction)\r\n  const [start, setStart] = useState();\r\n  const [end, setEnd] = useState();\r\n\r\n  const fetchStartCords = (lat, lng) => {\r\n    // console.log(\"latitude.....\", lat)\r\n    // console.log(\"latitude.....\", lng)\r\n    setStart({\r\n      latitude: lat,\r\n      longitude: lng,\r\n      latitudeDelta: 0.000212699887515984465,\r\n      longitudeDelta: 0.000999999,\r\n    });\r\n  };\r\n  const fetchDestinationCords = (lat, lng) => {\r\n    // console.log(\"latitude.....\", lat)\r\n    // console.log(\"latitude.....\", lng)\r\n    setEnd({\r\n      latitude: lat,\r\n      longitude: lng,\r\n      latitudeDelta: 0.000212699887515984465,\r\n      longitudeDelta: 0.000999999,\r\n    });\r\n  };\r\n  console.log(\"Its for static picup===>   \", start);\r\n  console.log(\"Its for static Distination===>    \", end);\r\n\r\n  const mapRef = useRef(null);\r\n  //const [coords, setCoords] = useState([]);\r\n\r\n  //For setting Origion location its mean startup points\r\n  const [mapOrigion, setMapOrigion] = useState({\r\n    latitude: 30.3753,\r\n    longitude: 69.3451,\r\n    latitudeDelta: 0.000212699887515984465,\r\n    longitudeDelta: 0.000999999,\r\n  });\r\n\r\n  const [tmState, setTmState] = useState({\r\n    Time: 0,\r\n    distance: 0,\r\n  });\r\n  const fetchTimeDuration = (t, d) => {\r\n    setTmState({\r\n      Time: t.toFixed(0),\r\n      distance: d.toFixed(1),\r\n    });\r\n  };\r\n\r\n  //Fetch Neraby places\r\n  //  const fetchNearestPlacesFromGoogle = () => {\r\n\r\n  //     const latitude = 32.4756884; // you can update it with user's latitude & Longitude\r\n  //     const longitude = 74.5083644;\r\n  //    let radMetter = 8 * 1000; // Search withing 2 KM radius\r\n  //    const type=['rawasiya']\r\n\r\n  //     const url = 'https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=' + latitude + ',' + longitude + '&radius=' + radMetter+'&type='+type + '&key=' + GoogleApi.Google_Api\r\n  //     console.log('its fetch nearby function',url)\r\n  //     fetch(url)\r\n  //       .then(res => {\r\n  //         return res.json()\r\n  //       })\r\n  //       .then(res => {\r\n\r\n  //       var places = [] // This Array WIll contain locations received from google\r\n  //         for(let googlePlace of res.results) {\r\n  //           var place = {}\r\n  //           var lat = googlePlace.geometry.location.lat;\r\n  //           var lng = googlePlace.geometry.location.lng;\r\n  //           var type = googlePlace.types;\r\n  //           var coordinate = {\r\n  //             latitude: lat,\r\n  //             longitude: lng,\r\n  //             typo:type,\r\n  //           }\r\n\r\n  //           var gallery = []\r\n  //       console.log(coordinate)\r\n  //           if (googlePlace.photos) {\r\n  //            for(let photo of googlePlace.photos) {\r\n  //              var photoUrl = url.GooglePicBaseUrl + photo.photo_reference;\r\n  //              gallery.push(photoUrl);\r\n  //           }\r\n  //         }\r\n  //       //  console.log(photoUrl)\r\n  //           place['placeTypes'] = googlePlace.types\r\n  //           place['coordinate'] = coordinate\r\n  //           place['placeId'] = googlePlace.place_id\r\n  //           place['placeName'] = googlePlace.name\r\n  //           place['gallery'] = gallery\r\n\r\n  //           places.push(place);\r\n  //         }\r\n\r\n  //         // Do your work here with places Array\r\n  //       })\r\n  //       .catch(error => {\r\n  //         console.log(error);\r\n  //       });\r\n\r\n  //   }\r\n\r\n  const [pakkiKotli, setPakkiKotli] = useState({\r\n    latitude: 32.47766203475993,\r\n    longitude: 74.50725950002612,\r\n  });\r\n\r\n  return (\r\n    <View>\r\n      <StatusBar barStyle=\"dark-content\" />\r\n      {/* <View style={{ flexDirection: \"row\" }}>\r\n        <MapDirection\r\n          placehol={\"Enter Start Point\"}\r\n          fetchAddress={fetchStartCords}\r\n        /> */}\r\n      {/* <MapDirection\r\n          placehol={\"Enter Drop Point\"}\r\n          fetchAddress={fetchDestinationCords}\r\n        />\r\n      </View> */}\r\n      <View style={{ marginBottom: -90 }}>\r\n        <MapView\r\n          showsUserLocation={true}\r\n          provider={PROVIDER_GOOGLE}\r\n          zoomEnabled={true}\r\n          style={{ alignSelf: \"stretch\", height: \"88%\" }}\r\n          initialRegion={mapOrigion}\r\n          followUserLocation={true}\r\n          ref={mapRef}\r\n          // onMapReady={goToInitialRegion.bind()}\r\n          //  onRegionChangeComplete={(region) => setRegion(region)}\r\n        >\r\n          {/* <Marker\r\n            coordinate={start}\r\n            image={require(\"../assets/rec.png\")}\r\n            height={10}\r\n            width={10}\r\n          />*/}\r\n          {Object.keys(dummyDestination).length > 0 && (\r\n            <Marker\r\n              coordinate={helper}\r\n              image={require(\"../../assets/HelperImageIcon/electrician11.png\")}\r\n              title=\"rawasiya\"\r\n              description=\"i am a electrician for Helper app\"\r\n            />\r\n          )}\r\n          {Object.keys(dummyDestination).length > 0 && (\r\n            <MapViewDirections\r\n              origin={location}\r\n              destination={helper}\r\n              apikey={GoogleApi.Google_Api}\r\n              strokeWidth={6}\r\n              strokeColor={\"red\"}\r\n              optimizeWaypoints={true}\r\n              onReady={(result) => {\r\n                console.log(`Time is ===> ${result.distance} km`);\r\n                console.log(`Time is ===> ${result.duration} min`);\r\n                fetchTimeDuration(result.duration, result.distance);\r\n                mapRef.current.fitToCoordinates(result.coordinates, {\r\n                  edgepedding: {\r\n                    right: 30,\r\n                    botton: 300,\r\n                    left: 30,\r\n                    top: 100,\r\n                  },\r\n                });\r\n              }}\r\n            />\r\n          )}\r\n\r\n          {/* {coords.length > 0 && <Polyline coordinates={coords} />}\r\n        <Polyline\r\n        coordinates={[tokyoRegion, chibaRegion]} //specify our coordinates\r\n        strokeColor={\"#000\"}\r\n        strokeWidth={3}\r\n        lineDashPattern={[1]}\r\n      />\r\n\r\n        <Marker  coordinate={{ latitude: 52.5200066, longitude: 13.404954 }}\r\n          image={require('../assets/HelperIcon/electrician.png')}>\r\n\r\n     </Marker>\r\n        \r\n      </MapView>\r\n      <Text style={styles.text}>Current latitude: {region.latitude}</Text>\r\n    <Text style={styles.text}>Current longitude: {region.longitude}</Text>\r\n    <View style={styles.container}>*/}\r\n          {/* <Button title=\"Start\" /> */}\r\n          <View style={styles.TDSty}>\r\n            <View\r\n              style={{\r\n                paddingLeft: 40,\r\n                paddingTop: 20,\r\n                justifyContent: \"space-evenly\",\r\n                alignItems: \"center\",\r\n                position: \"absolute\",\r\n              }}\r\n            >\r\n              <Text style={styles.TextSty}>{tmState.Time} min's</Text>\r\n              <Text style={styles.TextdarkSty}>Estimated Time</Text>\r\n            </View>\r\n            <View\r\n              style={{\r\n                paddingLeft: 240,\r\n                paddingTop: 20,\r\n                justifyContent: \"space-evenly\",\r\n                alignContent: \"center\",\r\n                alignItems: \"center\",\r\n                position: \"absolute\",\r\n              }}\r\n            >\r\n              <Text style={styles.TextSty}>{dis} Km's</Text>\r\n              <Text style={styles.TextdarkSty}>Distance</Text>\r\n            </View>\r\n            {/* <Text style={styles.TextSty}> Km's  {tmState.distance}</Text>\r\n            <Text style={styles.TextSty}>{tmState.Time} mins</Text> */}\r\n          </View>\r\n          {/* <TouchableOpacity\r\n            onPress={() => navigation.navigate(\"Chat\", { ids: id })}\r\n            style={styles.TDSty2}\r\n          >\r\n            <View\r\n              style={{\r\n                paddingTop: 590,\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n                position: \"absolute\",\r\n                paddingLeft: 150,\r\n              }}\r\n            >\r\n              <Text style={styles.TextSty2}>Start Chat</Text>\r\n            </View>\r\n          </TouchableOpacity> */}\r\n\r\n          {/* <TouchableOpacity style={{paddingTop:200}} onPress={fetchNearestPlacesFromGoogle}><Text style={{fontSize:20}}>Fetch</Text></TouchableOpacity> */}\r\n        </MapView>\r\n      </View>\r\n      <View style={styles.mapbottom}>\r\n        <View>\r\n          <ScrollView style={{ height: 160 }} showsVerticalScrollIndicator={false}>\r\n            <View style={{ alignSelf: \"baseline\", marginLeft: 180 }}>\r\n              <Ionicons\r\n                style={{ alignSelf: \"center\" }}\r\n                name=\"md-ellipsis-horizontal\"\r\n                size={34}\r\n                color=\"gray\"\r\n              />\r\n            </View>\r\n            <View>\r\n              <ActivityIndicator size=\"small\" color=\"gray\" />\r\n              <Text style={{fontSize:9,alignSelf:'center',color:'gray'}}>Work in Progress</Text>\r\n              </View>\r\n            <View\r\n              style={{ flexDirection: \"row\", justifyContent: \"space-around\",marginTop:15 }}\r\n            >\r\n              <View>\r\n                <Ionicons name=\"timer\" size={37} color=\"green\" />\r\n                <Text style={styles.ttx}>{tmState.Time} min</Text>\r\n              </View>\r\n\r\n              <View>\r\n                <MaterialIcons name=\"attach-money\" size={37} color=\"green\" />\r\n                <Text style={styles.ttx}>150 Rs</Text>\r\n              </View>\r\n              <View>\r\n                <Entypo name=\"direction\" size={37} color=\"green\" />\r\n                <Text style={styles.ttx}>{dis} km</Text>\r\n              </View>\r\n              <TouchableOpacity>\r\n                <Ionicons\r\n                  name=\"chatbubble-ellipses-outline\"\r\n                  size={37}\r\n                  color=\"green\"\r\n                />\r\n                <Text style={styles.ttx}> Chat</Text>\r\n              </TouchableOpacity>\r\n            </View>\r\n\r\n            <TouchableOpacity style={styles.botonn} onPress={()=>navigation.navigate('Feed Back',{id:id})}>\r\n              <Text style={{ alignSelf: 'center', color: '#fff' }}>Work Done</Text>\r\n            </TouchableOpacity>\r\n            <View style={{height:50}}></View>\r\n          </ScrollView>\r\n        </View>\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  botonn: {\r\n    backgroundColor: \"green\",\r\n    borderRadius: 30,\r\n    width: 120,\r\n    height: 40,\r\n    alignSelf: \"center\",\r\n    alignContent: \"center\",\r\n    padding: 10,\r\n    marginTop:20\r\n  },\r\n  mapbottom: {\r\n    // borderStartColor: \"blue\",\r\n    backgroundColor: \"#ffff\",\r\n    height: 160,\r\n    marginBottom: -140,\r\n    borderTopEndRadius: 30,\r\n    borderTopStartRadius: 30,\r\n    shadowOffset: {\r\n      width: 0,\r\n      height: 4,\r\n    },\r\n    shadowOpacity: 0.4,\r\n    shadowRadius: 4.65,\r\n  },\r\n  ttx: {\r\n    color: \"gray\",\r\n    fontWeight: \"bold\",\r\n    fontSize: 12,\r\n  },\r\n  TDSty: {\r\n    height: 60,\r\n    backgroundColor: \"#ffff\",\r\n    width: \"90%\",\r\n    alignSelf: \"center\",\r\n    borderRadius: 20,\r\n    flexDirection: \"row\",\r\n    marginTop: 15,\r\n    justifyContent: \"space-between\",\r\n    padding: 10,\r\n    shadowColor: \"#000\",\r\n    shadowOffset: {\r\n      width: 0,\r\n      height: 4,\r\n    },\r\n    shadowOpacity: 0.4,\r\n    shadowRadius: 4.65,\r\n  },\r\n  TDSty2: {\r\n    height: 50,\r\n    backgroundColor: \"#ffff\",\r\n    width: \"30%\",\r\n    alignSelf: \"center\",\r\n    borderRadius: 20,\r\n    flexDirection: \"row\",\r\n    marginTop: 500,\r\n    justifyContent: \"center\",\r\n    padding: 10,\r\n    shadowColor: \"#000\",\r\n    shadowOffset: {\r\n      width: 4,\r\n      height: 6,\r\n    },\r\n    shadowOpacity: 0.8,\r\n    shadowRadius: 4.65,\r\n    backgroundColor: \"#00c853\",\r\n  },\r\n  TextSty: {\r\n    fontSize: 27,\r\n    fontWeight: \"bold\",\r\n    color: \"green\",\r\n  },\r\n  TextSty2: {\r\n    fontSize: 18,\r\n    fontWeight: \"bold\",\r\n    color: \"white\",\r\n  },\r\n  TextdarkSty: {\r\n    color: \"gray\",\r\n    fontSize: 12,\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}